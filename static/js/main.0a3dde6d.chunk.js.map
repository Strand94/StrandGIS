{"version":3,"sources":["Map/MainMap.js","sidebar/tools/Union.js","sidebar/tools/Intersect.js","sidebar/tools/Difference.js","sidebar/Layers.js","sidebar/tools/Buffer.js","sidebar/tools/Dissolve.js","sidebar/Sidebar.js","App.js","registerServiceWorker.js","index.js"],"names":["config","get_newgeojson","new_geojson","new_geojson_key","geojson","geojson_key","this","setState","reorderLayers","layers","i","console","log","g","document","getElementsByTagName","length","map_layer","getElementsByClassName","$","appendTo","params","center","zoomControl","zoom","scrollwheel","legends","infoControl","attributionControl","tileLayer","uri","attribution","id","accessToken","noWrap","maxZoom","minZoom","MainMap","props","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","map","geojsonLayer","_mapNode","onEachFeature","bind","assertThisInitialized","init","prevProps","prevState","addGeoJSONLayer","remove","key","L","geoJson","setStyle","className","addTo","fitBounds","getBounds","target","feature","layer","properties","NAME","popupContent","concat","bindPopup","control","position","scale","_this2","lat","lng","react_default","a","createElement","ref","node","Component","getLayerListUnion","layer_list","Union","layer_data_list","data","push","name","listItems","d","value","slice","onClick","param","executeUnion","union_select1","getElementById","geojson1","options","selectedIndex","union_select2","callUnion","getLayerListIntersect","Intersect","executeIntersect","intersect_select1","intersect_select2","callIntersect","getLayerListDifference","Difference","executeDifference","difference_select1","difference_select2","callDifference","turf","require","changeName","input_element","val","undefined","toConsumableArray","customizeFill","colors","map_element","css","color","alpha","customizeStroke","download","download_layer_key","attr","layer_position","geojson_file","filename","split","join","replace","blob","Blob","JSON","stringify","type","FileSaver","saveAs","createLayer","newest_file_name","newest_file_key","addLayerProperties","addEventListener","current","getLayers","list_order","class_name","Sortable","create","onEnd","e","Layers","name_list","readGeoJSONFile","getLayerList","hide_map_element","edit_layer_element","event","stopPropagation","checked","show","hide","hide_status","is","list_element","defaultChecked","hidden","onChange","lib_default","deleteLayer","accept","activateFileUpload","click","deleteLayerCall","file_upload","file","files","Math","random","toString","substr","reader","FileReader","onload","parse","result","geojson_features","features","new_features","geometry","j","coordinates","circle","clean_geojson","geojsonMultiPolygonToPolygon","clean_data","new_geojsonToParent","readAsText","alert","Buffer","placeholder","executeBuffer","callBuffer","Dissolve","executeDissolve","callDissolve","buffer_radius","geojson_file_key","find_called_geojson","selected_layer_geojson","collect_called_geojson","selected_layer_name","buffered","buffer","units","buffer_dissolved","union","final_buffer","buffer_layer_key","generateKey","dissolveLayer","final_dissolve","dissolve_layer_key","geojson_file_key1","geojson_file_key2","layer_position1","selected_layer_geojson1","selected_layer_name1","layer_position2","selected_layer_geojson2","selected_layer_name2","unionLayer","union_layer_key","f1","f2","conflictlist","parcel1","parcel2","conflict","intersect","LayerGroup","intersectLayer","intersect_layer_key","difference1","geojsonPolygonToMultiPolygon","difference2","difference","differenceLayer","difference_layer_key","geojson_file_position","Sidebar","href","sidebar_tools_Buffer","sidebar_tools_Dissolve","sidebar_tools_Union","sidebar_tools_Intersect","sidebar_tools_Difference","src_sidebar_Layers","App","src_Map_MainMap","src_sidebar_Sidebar","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","catch","error","ReactDOM","render","src_App_0","URL","process","origin","fetch","response","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker","toggle"],"mappings":"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","file":"static/js/main.0a3dde6d.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport L from 'leaflet';\r\nimport 'leaflet/dist/leaflet.css';\r\nimport 'leaflet-draw/dist/leaflet.draw.css';\r\nimport {Map, TileLayer, Popup, GeoJSON, FeatureGroup, Circle} from 'react-leaflet';\r\nimport './MainMap.css';\r\nimport $ from \"jquery\";\r\n// store the map configuration properties in an object,\r\n// we could also move this to a separate file & import it if desired.\r\nlet config = {};\r\nconfig.params = {\r\n  center: [63.43,10.4],\r\n  zoomControl: false,\r\n  zoom: 12,\r\n  scrollwheel: false,\r\n  legends: true,\r\n  infoControl: false,\r\n  attributionControl: true\r\n};\r\nconfig.tileLayer = {\r\n  uri: 'https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png',\r\n  params: {\r\n    attribution: '&copy; <a href=\"http://www.openstreetmap.org/copyright\">OpenStreetMap</a>',\r\n    id: '',\r\n    accessToken: '',\r\n    noWrap: true,\r\n    maxZoom: 18,\r\n    minZoom: 4,\r\n  }\r\n};\r\n\r\n// Gets call from Sidebar to add geojson file to the map.\r\nexport function get_newgeojson(new_geojson, new_geojson_key) {\r\n  var geojson = new_geojson\r\n  var geojson_key = new_geojson_key\r\n  this.setState({ geojson, geojson_key })\r\n}\r\n\r\nclass MainMap extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      map: null,\r\n      tileLayer: null,\r\n      geojsonLayer: null,\r\n      geojson: null,\r\n      geojson_key: null,\r\n    };\r\n    this._mapNode = null;\r\n    this.onEachFeature = this.onEachFeature.bind(this);\r\n    get_newgeojson = get_newgeojson.bind(this)\r\n  }\r\n\r\n  // code to run just after the component \"mounts\" / DOM elements are created\r\n  componentDidMount() {\r\n    // creates the Leaflet map object\r\n    if (!this.state.map) this.init(this._mapNode);\r\n  }\r\n\r\n  // code to run when the component receives prop or state updates.\r\n  componentDidUpdate(prevProps, prevState) {\r\n    // Render map again if new geojson data is added.\r\n    if (this.state.geojson !== prevState.geojson){\r\n      this.addGeoJSONLayer(this.state.geojson, this.state.geojson_key);\r\n    }\r\n  }\r\n  // code to run just before unmounting the component\r\n  componentWillUnmount() {\r\n    // this destroys the Leaflet map object & related event listeners\r\n    this.state.map.remove();\r\n  }\r\n\r\n\r\n\r\n// Adds geojson layer to map, while giving it required features and class name\r\n  addGeoJSONLayer(geojson, key) {\r\n    const geojsonLayer = L.geoJson(geojson, {\r\n      onEachFeature: this.onEachFeature,\r\n    });\r\n\r\n    // add our GeoJSON layer to the Leaflet map object\r\n    if (this.state.geojson_key !== null) {\r\n      geojsonLayer.setStyle({'className': 'map-path '+this.state.geojson_key}); //will add key id to geojson layer.\r\n    } else {\r\n      geojsonLayer.setStyle({'className': 'map-path'}); //will add the required class\r\n    }\r\n    geojsonLayer.addTo(this.state.map);\r\n    this.state.map.fitBounds(geojsonLayer.getBounds())\r\n\r\n    // store the Leaflet GeoJSON layer in our component state.\r\n    this.setState({ geojsonLayer });\r\n   }\r\n\r\n  zoomToFeature(target) {\r\n    var fitBoundsParams = {\r\n      paddingTopLeft: [200,10],\r\n      paddingBottomRight: [10,10]\r\n    };\r\n  }\r\n\r\n  onEachFeature(feature, layer) {\r\n    if (feature.properties && feature.properties.NAME) {\r\n\r\n      // assemble the HTML for the markers' popups (Leaflet's bindPopup method doesn't accept React JSX)\r\n      const popupContent = `<h3>${feature.properties.NAME}</h3>`\r\n\r\n      // add our popups\r\n      layer.bindPopup(popupContent);\r\n\r\n    }\r\n\r\n\r\n}\r\n\r\n  // Initializs the map\r\n  init(id) {\r\n    if (this.state.map) return;\r\n    // this function creates the Leaflet map object and is called after the Map component mounts\r\n    let map = L.map(id, config.params);\r\n    L.control.zoom({ position: \"bottomleft\"}).addTo(map);\r\n    L.control.scale({ position: \"bottomleft\"}).addTo(map);\r\n\r\n    // a TileLayer is used as the \"basemap\"\r\n    const tileLayer = L.tileLayer(config.tileLayer.uri, config.tileLayer.params).addTo(map);\r\n\r\n    // set our state to include the tile layer\r\n    this.setState({ map, tileLayer });\r\n  }\r\n\r\n  render() {\r\n    //Set the map position and zoom level\r\n    const position = [this.state.lat, this.state.lng]\r\n\r\n    return (\r\n      <div id=\"mapUI\">\r\n         <div ref={(node) => this._mapNode = node} id=\"map\" />\r\n     </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport function reorderLayers(layers) {\r\n  console.log(layers)\r\n  var i;\r\n  var g = document.getElementsByTagName(\"g\");\r\n  for (i=layers.length; i > -1; i--){\r\n    var map_layer = document.getElementsByClassName(layers[i]+\" leaflet-interactive\")\r\n    console.log(layers[i])\r\n    $(map_layer).appendTo(g);\r\n  }\r\n}\r\n\r\n\r\n\r\nexport default MainMap;\r\n","import React, { Component } from 'react';\r\nimport \"./Union.css\"\r\nimport { callUnion } from '../Sidebar.js'\r\nimport $ from \"jquery\";\r\n\r\n\r\n// Fetches layer_list from layers, in order to get selection data.\r\nexport function getLayerListUnion(layer_list) {\r\n  this.setState({ layer_list })\r\n}\r\n\r\nclass Union extends Component{\r\n  constructor(props){\r\n    super(props)\r\n    this.state = {\r\n      layer_list: []\r\n    }\r\n    getLayerListUnion = getLayerListUnion.bind(this);\r\n  }\r\n\r\n  render(){\r\n    // Parses through all layers stored in memory and add them to the select lists.\r\n    const layer_data_list = this.state.layer_list\r\n    var data = []\r\n    for (var i = 0; i < layer_data_list.length; i++) {\r\n      data.push({\"name\":layer_data_list[i][0],\"key\":layer_data_list[i][1]})\r\n    }\r\n    const listItems = data.map((d) => <option className={d.key} value={d.key}>{d.name.slice(0,30)}</option>)\r\n\r\n    return(\r\n      <div>\r\n        <p>Select the 2 layers you want to unite.</p>\r\n        <select id=\"union_select_geojson1\">\r\n          {listItems}\r\n        </select>\r\n        <select id=\"union_select_geojson2\">\r\n          {listItems}\r\n        </select>\r\n        <button onClick={(param) => this.executeUnion(param)}>Apply</button>\r\n      </div>\r\n    )\r\n}\r\n\r\n    // Sends call to Sidebar to run Union code.\r\n    executeUnion(){\r\n      // Collects chosen layers from select list.\r\n      var union_select1 = document.getElementById(\"union_select_geojson1\");\r\n      var geojson1 = union_select1.options[union_select1.selectedIndex].value;\r\n      var union_select2 = document.getElementById(\"union_select_geojson2\");\r\n      var geojson2 = union_select2.options[union_select2.selectedIndex].value;\r\n      callUnion(geojson1, geojson2)\r\n    }\r\n\r\n\r\n}\r\n\r\nexport default Union;\r\n","import React, { Component } from 'react';\r\nimport \"./Intersect.css\"\r\nimport { callIntersect } from '../Sidebar.js'\r\nimport $ from \"jquery\";\r\n\r\n\r\n// Fetches layer_list from layers, in order to get selection data.\r\nexport function getLayerListIntersect(layer_list) {\r\n  this.setState({ layer_list })\r\n}\r\n\r\nclass Intersect extends Component{\r\n  constructor(props){\r\n    super(props)\r\n    this.state = {\r\n      layer_list: []\r\n    }\r\n    getLayerListIntersect = getLayerListIntersect.bind(this);\r\n  }\r\n\r\n  render(){\r\n    // Parses through all layers stored in memory and add them to the select lists.\r\n    const layer_data_list = this.state.layer_list\r\n    var data = []\r\n    for (var i = 0; i < layer_data_list.length; i++) {\r\n      data.push({\"name\":layer_data_list[i][0],\"key\":layer_data_list[i][1]})\r\n    }\r\n    const listItems = data.map((d) => <option className={d.key} value={d.key}>{d.name.slice(0,30)}</option>)\r\n\r\n    return(\r\n      <div>\r\n        <p>Select the 2 layers you want to intersect.</p>\r\n        <select id=\"intersect_select_geojson1\">\r\n          {listItems}\r\n        </select>\r\n        <select id=\"intersect_select_geojson2\">\r\n          {listItems}\r\n        </select>\r\n        <button onClick={(param) => this.executeIntersect(param)}>Apply</button>\r\n      </div>\r\n    )\r\n}\r\n\r\n    // Sends call to Sidebar to run Intersect.\r\n    executeIntersect(){\r\n      // Collects chosen layers from select list.\r\n      var intersect_select1 = document.getElementById(\"intersect_select_geojson1\");\r\n      var geojson1 = intersect_select1.options[intersect_select1.selectedIndex].value;\r\n      var intersect_select2 = document.getElementById(\"intersect_select_geojson2\");\r\n      var geojson2 = intersect_select2.options[intersect_select2.selectedIndex].value;\r\n      callIntersect(geojson1, geojson2)\r\n    }\r\n\r\n\r\n}\r\n\r\nexport default Intersect;\r\n","import React, { Component } from 'react';\r\nimport \"./Difference.css\"\r\nimport { callDifference } from '../Sidebar.js'\r\nimport $ from \"jquery\";\r\n\r\n\r\n// Fetches layer_list from layers, in order to get selection data.\r\nexport function getLayerListDifference(layer_list) {\r\n  this.setState({ layer_list })\r\n}\r\n\r\nclass Difference extends Component{\r\n  constructor(props){\r\n    super(props)\r\n    this.state = {\r\n      layer_list: []\r\n    }\r\n    getLayerListDifference = getLayerListDifference.bind(this);\r\n  }\r\n\r\n  render(){\r\n    // Parses through all layers stored in memory and add them to the select lists.\r\n    const layer_data_list = this.state.layer_list\r\n    var data = []\r\n    for (var i = 0; i < layer_data_list.length; i++) {\r\n      data.push({\"name\":layer_data_list[i][0],\"key\":layer_data_list[i][1]})\r\n    }\r\n    const listItems = data.map((d) => <option className={d.key} value={d.key}>{d.name.slice(0,30)}</option>)\r\n\r\n    return(\r\n      <div>\r\n        <p>Select the 2 layers you want to difference.</p>\r\n        <select id=\"difference_select_geojson1\">\r\n          {listItems}\r\n        </select>\r\n        <select id=\"difference_select_geojson2\">\r\n          {listItems}\r\n        </select>\r\n        <button onClick={(param) => this.executeDifference(param)}>Apply</button>\r\n      </div>\r\n    )\r\n}\r\n\r\n    // Sends call to Sidebar to run Intersect.\r\n    executeDifference(){\r\n      // Collects chosen layers from select list.\r\n      var difference_select1 = document.getElementById(\"difference_select_geojson1\");\r\n      var geojson1 = difference_select1.options[difference_select1.selectedIndex].value;\r\n      var difference_select2 = document.getElementById(\"difference_select_geojson2\");\r\n      var geojson2 = difference_select2.options[difference_select2.selectedIndex].value;\r\n      callDifference(geojson1, geojson2)\r\n    }\r\n\r\n\r\n}\r\n\r\nexport default Difference;\r\n","import React, { Component } from 'react';\r\nimport Sortable from 'sortablejs';\r\nimport './Layers.css';\r\nimport { new_geojsonToParent, getLayerList, deleteLayerCall, geojsonMultiPolygonToPolygon } from './Sidebar.js'\r\nimport { reorderLayers } from '../Map/MainMap'\r\nimport { getLayerListUnion } from './tools/Union.js'\r\nimport { getLayerListIntersect } from './tools/Intersect.js'\r\nimport { getLayerListDifference } from './tools/Difference.js'\r\nimport $ from \"jquery\";\r\nimport FileSaver from 'file-saver';\r\nimport ColorPicker from 'rc-color-picker';\r\nimport 'rc-color-picker/assets/index.css';\r\nvar turf = require('@turf/turf')\r\n\r\n\r\n// Class that handles layer logic and uploading of files.\r\nclass Layers extends Component{\r\n  constructor(props){\r\n    super(props)\r\n    this.state = {\r\n      layer_list: [],\r\n      name_list: []\r\n    }\r\n    this.readGeoJSONFile = this.readGeoJSONFile.bind(this);\r\n    download = download.bind(this)\r\n    createLayer = createLayer.bind(this);\r\n    changeName = changeName.bind(this);\r\n  }\r\n\r\n  componentDidUpdate(prevProps, prevState) {\r\n\r\n    // Appending new file name to Layer list with a unique key value.\r\n    if (this.state.layer_list !== prevState.layer_list ){\r\n      getLayerList(this.state.layer_list)\r\n      getLayerListUnion(this.state.layer_list)\r\n      getLayerListIntersect(this.state.layer_list)\r\n      getLayerListDifference(this.state.layer_list)\r\n\r\n      // Sets a click listener for the newest layer's checkbox event.\r\n      var id = this.state.layer_list[this.state.layer_list.length-1][1];\r\n      var hide_map_element = document.getElementById('checkbox_'+id);\r\n      var edit_layer_element = document.getElementById('customize_'+id);\r\n\r\n      // Adding hide/show when clicking checkbox on layer.\r\n      hide_map_element.addEventListener('click', function(event) {\r\n        // adding stopPropagation so layer is not selected when checkbox is clicked.\r\n        event.stopPropagation();\r\n        // To check whether the checkbox is clicked or not.\r\n        var hide_map_element = document.getElementById('checkbox_'+id);\r\n        // To get the correct layer on the map to hide.\r\n        var map_element = document.getElementsByClassName(\"map-path \"+id);\r\n\r\n        if (hide_map_element.checked == true) {\r\n          $(map_element).show();\r\n        } else {\r\n          $(map_element).hide();\r\n        }\r\n      });\r\n\r\n      edit_layer_element.addEventListener('click', function(event) {\r\n        // adding stopPropagation so layer is not selected when checkbox is clicked.\r\n        event.stopPropagation();\r\n        // To check whether the checkbox is clicked or not.\r\n        var edit_layer_element = document.getElementById('customize_'+id);\r\n        var hide_status = 'customizeDiv_'+id\r\n        var value = $('.'+hide_status).is(\":visible\");\r\n        var list_element = document.getElementsByClassName(\"layer \"+id);\r\n\r\n        if (value) {\r\n          $('.'+hide_status).hide();\r\n          $(list_element).css(\"height\", \"65px\");\r\n        } else {\r\n          $('.'+hide_status).show();\r\n          $(list_element).css(\"height\", \"200px\");\r\n\r\n        }\r\n      });\r\n\r\n    }\r\n\r\n    // Make all the new layers selectable and dragable.\r\n    addLayerProperties()\r\n\r\n\r\n  }\r\n\r\n  componentDidMount() {\r\n    // Make the initial layers selectable and dragable.\r\n    addLayerProperties()\r\n\r\n  }\r\n\r\n  render(){\r\n    // Parses through all layers stored in memory and add them to the Layer list.\r\n    const layer_data_list = this.state.layer_list\r\n    var data = []\r\n    for (var i = 0; i < layer_data_list.length; i++) {\r\n      data.push({\"name\":layer_data_list[i][0],\"key\":layer_data_list[i][1]})\r\n    }\r\n    const listItems = data.map((d) =>\r\n      <li className={\"layer \"+d.key} id={d.key}>\r\n        <div className=\"LayerContainer\">\r\n          <div className=\"LayerData\">\r\n          <p className=\"LayerName dont-break-out\" id={\"name_\"+d.key}>\r\n            {d.name.slice(0,30)}\r\n          </p>\r\n            <input className=\"toggleShow\" type=\"checkbox\" defaultChecked={true} id={\"checkbox_\"+d.key} />\r\n            <input className=\"customize\" type=\"button\" value=\"⚙️\" id={\"customize_\"+d.key} />\r\n\r\n          </div>\r\n          <div className={\"customizeDiv_\"+d.key} hidden >\r\n            <div>\r\n              <p id={\"edit_text\"}>Change name:</p>\r\n              <input type=\"text\" value={d.name} onChange={(param) => changeName(d.key)} id={\"change_name_\"+d.key} />\r\n              <p id={\"edit_text\"}>Change colors:</p>\r\n              <div id=\"container\">\r\n                <div id=\"fill\">\r\n                  <p>Fill</p><ColorPicker className={d.key} color={'#0ad'} onChange={customizeFill} alpha={50}/>\r\n                </div>\r\n                <div id=\"stroke\">\r\n                  <p>Stroke</p><ColorPicker className={d.key} color={'#0ad'} onChange={customizeStroke} alpha={50}/>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </li>\r\n    )\r\n\r\n    return(\r\n      <div id=\"layers\">\r\n        <p id=\"subtitle\">Layers</p>\r\n        <button id=\"delete\" onClick={(param) => this.deleteLayer(param)}>🗑️</button>\r\n        <button id=\"save\" onClick={(param) => download(param)}>💾</button>\r\n        <p id='sub_info'>Click to select, drag to reorder.</p>\r\n        <div>\r\n          <ul id=\"sortable_layers\" className=\"ui-sortable\">\r\n            {listItems}\r\n          </ul>\r\n        </div>\r\n        <div>\r\n          <p id=\"subtitle\">Add Layer</p>\r\n          <div>\r\n            {/* Hidden input field to handle file upload on button click. */}\r\n            <input id='fileid' type='file' onChange={(param) => this.readGeoJSONFile(param)} accept=\".GeoJSON,.JSON\" hidden/>\r\n            <button id=\"upload\" onClick={(param) => this.activateFileUpload(param)}>Upload file</button>\r\n          </div>\r\n          <p id='sub_info'>Click button and upload GeoJSON or JSON file.</p>\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n\r\n  // Checks if upload GeoJSON button has been clicked, and file has been selected.\r\n  activateFileUpload(){\r\n    document.getElementById('fileid').click();\r\n  }\r\n\r\n  // Sends call to Sidebar to delete selected layer, when delete button is clicked.\r\n  deleteLayer(){\r\n    var delete_layer_key= ($('li.active').attr('id'));\r\n    deleteLayerCall(delete_layer_key)\r\n  }\r\n\r\n  // Adding file reading code in Layers as this is the only place it is used.\r\n  readGeoJSONFile(file_upload){\r\n    //Retrieving the first (and only!) File from the FileList object\r\n    var file = file_upload.target.files[0];\r\n    const newest_file_key = Math.random().toString(36).substr(2, 9);\r\n    //NOTE: Math.random should be unique (with less than 10.000 simulatanious layers) because of its seeding algorithm.\r\n    const newest_file_name = file.name;\r\n\r\n    if (file) {\r\n      var reader = new FileReader();\r\n      reader.onload = function(e) {\r\n        const new_geojson = JSON.parse(e.target.result)\r\n\r\n        // Checks the uploaded file, and cleans the data, making everything on same format.\r\n        if (new_geojson.type == 'FeatureCollection') {\r\n          var geojson_features = new_geojson.features\r\n          var new_features = []\r\n\r\n          for (var i = 0; i < geojson_features.length; i++) {\r\n            if(geojson_features[i].geometry.type == 'Polygon') {\r\n              new_features.push(geojson_features[i])\r\n            }\r\n            else if(geojson_features[i].geometry.type == 'MultiPolygon') {\r\n              for (var j = 0; j < geojson_features[i].geometry.coordinates.length; j++) {\r\n                var feature = {\"type\": \"Feature\", \"properties\": {},  \"geometry\": { \"type\": \"Polygon\", \"coordinates\": geojson_features[i].geometry.coordinates[j] }}\r\n                new_features.push(feature)\r\n              }\r\n            }\r\n            else if(geojson_features[i].geometry.type == 'Point') {\r\n              var circle = turf.circle(geojson_features[i].geometry.coordinates, 0.0025)\r\n              new_features.push(circle)\r\n            } else if(geojson_features[i].geometry.type == 'LineString') {\r\n              new_features.push(geojson_features[i])\r\n            }\r\n          }\r\n          var clean_geojson = {\"type\":\"FeatureCollection\",\"features\": new_features };\r\n        } else if (new_geojson.type == 'Feature') {\r\n            var clean_geojson = {\"type\":\"FeatureCollection\",\"features\": new_geojson };\r\n        } else {\r\n          var clean_geojson = clean_data(new_geojson)\r\n        }\r\n\r\n        // Sending the JSON extracted from file to Parent component.\r\n        new_geojsonToParent(clean_geojson, newest_file_key)\r\n        createLayer(newest_file_name, newest_file_key, clean_geojson)\r\n\r\n\r\n      }\r\n      reader.readAsText(file);\r\n    } else {\r\n      alert(\"Failed to load file\");\r\n    }\r\n\r\n  }\r\n}\r\n\r\n\r\n// Call to change layer name.\r\nexport function changeName(id) {\r\n  console.log(\"called: \"+id)\r\n  var input_element = $('#change_name_'+id).val();\r\n  console.log(input_element)\r\n  if (input_element == undefined) {\r\n    console.log(\"Sdkipping changeName\")\r\n  } else {\r\n\r\n    for (var i = 0; i < this.state.layer_list.length; i++) {\r\n      if (id == this.state.layer_list[i][1]){\r\n        var position = i\r\n      }\r\n    }\r\n\r\n    var layers = [...this.state.layer_list]\r\n    layers[position][0] = input_element\r\n    this.setState( {layers} )\r\n  }\r\n}\r\n\r\n// Add the customization of Layer fill (inner) to ther map.\r\nfunction customizeFill(colors) {\r\n  var map_element = document.getElementsByClassName(\"map-path \"+this.className);\r\n  console.log(map_element)\r\n  $(map_element).css(\"fill\", colors.color);\r\n  $(map_element).css(\"fill-opacity\", colors.alpha/100);\r\n}\r\n\r\n// Add the customization of Layer stroke (border) to ther map.\r\nfunction customizeStroke(colors) {\r\n  var map_element = document.getElementsByClassName(\"map-path \"+this.className);\r\n  console.log(map_element)\r\n  $(map_element).css(\"stroke\", colors.color);\r\n  $(map_element).css(\"stroke-opacity\", colors.alpha/100);\r\n}\r\n\r\n// Function that creates a file for selected layer to download.\r\nexport function download(geojson_key) {\r\n  var download_layer_key= ($('li.active').attr('id'));\r\n  for (var i = 0; i < this.state.layer_list.length; i++) {\r\n    if (download_layer_key == this.state.layer_list[i][1]){\r\n      var layer_position = i\r\n    }\r\n  }\r\n  var geojson_file = this.state.layer_list[layer_position][2]\r\n  var geojson_file_name = this.state.layer_list[layer_position][0]\r\n  var filename = geojson_file_name.split(' ').join('_');\r\n  var filename = filename.replace('.geojson', '');\r\n\r\n  var blob = new Blob([JSON.stringify(geojson_file)], {type: \"geojson;charset=utf-8\"});\r\n  FileSaver.saveAs(blob, filename+\".geojson\");\r\n}\r\n\r\n// Function that takes in all kinds of GeoJSON/JSON map data and cleans it.\r\nexport function clean_data(new_geojson) {\r\n  if (new_geojson.type == 'Polygon') {\r\n    var geojson = {\"type\":\"FeatureCollection\",\"features\":[{\"type\": \"Feature\", \"properties\": {},  \"geometry\": { \"type\": \"Polygon\", \"coordinates\": new_geojson.coordinates }}]};\r\n    return geojson\r\n  } else if (new_geojson.type == 'MultiPolygon') {\r\n      return geojsonMultiPolygonToPolygon(new_geojson)\r\n  } else if (new_geojson.type == 'Point') {\r\n    var circle = turf.circle(new_geojson.coordinates, 2)\r\n    var geojson = {\"type\":\"FeatureCollection\",\"features\": circle };\r\n    return geojson\r\n  }\r\n\r\n}\r\n\r\n\r\n// helper function that collect read data and sets new state.\r\nexport function createLayer(newest_file_name, newest_file_key, new_geojson){\r\n  this.setState({\r\n    layer_list: [...this.state.layer_list, [newest_file_name, newest_file_key, new_geojson]]\r\n  })\r\n}\r\n\r\n// Adds sortable and selectable options to layers.\r\nfunction addLayerProperties() {\r\n  // Gets the class name for the layer list.\r\n  var layer_list = document.getElementById(\"sortable_layers\");\r\n\r\n  // Makes the sidebar layer list selectable.\r\n  var layer = layer_list.getElementsByClassName(\"layer\");\r\n  for (var i = 0; i < layer.length; i++) {\r\n      layer[i].addEventListener(\"click\", function() {\r\n          var current = document.getElementsByClassName(\"active\");\r\n          if (current[0]){\r\n          current[0].className = current[0].className.replace(\" active\", \"\");\r\n          }\r\n          this.className += \" active\";\r\n      });\r\n  }\r\n  reorderLayers(getLayers())\r\n\r\n\r\n\r\n  // Makes the sidebar layer list sortable\r\n  Sortable.create(layer_list,{\r\n      onEnd: function (e){\r\n          // Reorders the layers based on ID name ordering.\r\n          reorderLayers(getLayers())\r\n      }\r\n  })\r\n\r\n  // Function that returns all layers (and their order.)\r\nfunction getLayers(){\r\n  var i;\r\n  var list_order = [];\r\n  var a = document.getElementsByClassName(\"layer\")\r\n  for (i=0; i < a.length; i++){\r\n      var class_name = ((a[i].className).split(\" \"))\r\n      list_order.push(class_name[1])\r\n  }\r\n  return list_order;\r\n}\r\n\r\n}\r\n\r\nexport default Layers;\r\n","import React, { Component } from 'react';\r\nimport \"./Buffer.css\"\r\nimport MainMap from '../../Map/MainMap'\r\nimport L from 'leaflet'\r\nimport { callBuffer } from '../Sidebar.js'\r\nimport geojson from '../../geojson/sor_trondelag.json';\r\nimport $ from \"jquery\";\r\nvar buffer = require('@turf/buffer')\r\nvar turf = require('@turf/turf')\r\n\r\n\r\nclass Buffer extends Component{\r\n  constructor(props) {\r\n    super(props)\r\n  }\r\n    render(){\r\n        return(\r\n        <div>\r\n           <div id=\"tool_title\">Distance:</div>\r\n           <input id=\"buffer_number\" type=\"number\" placeholder=\"Buffer in meters\"></input>\r\n           <br></br>\r\n           <button onClick={(param) => this.executeBuffer(param)}>Apply</button>\r\n        </div>\r\n        )\r\n    }\r\n\r\n    // Sends call to Sidebar to run Buffer code.\r\n    executeBuffer(){\r\n      var buffer_radius = document.getElementById('buffer_number').value;\r\n      var layer_key= ($('li.active').attr('id'));\r\n      callBuffer(buffer_radius, layer_key)\r\n    }\r\n}\r\n\r\n\r\n\r\nexport default Buffer;\r\n","import React, { Component } from 'react';\r\nimport \"./Dissolve.css\"\r\nimport { callDissolve } from '../Sidebar.js'\r\nimport $ from \"jquery\";\r\n\r\n\r\nclass Dissolve extends Component{\r\n    render(){\r\n        return(\r\n        <div>\r\n           <button onClick={(param) => this.executeDissolve(param)}>Apply</button>\r\n        </div>\r\n        )\r\n    }\r\n\r\n    // Sends call to Sidebar to run Buffer code.\r\n    executeDissolve(){\r\n      var layer_key= ($('li.active').attr('id'));\r\n      callDissolve(layer_key)\r\n    }\r\n}\r\n\r\nexport default Dissolve;\r\n","import React, { Component } from 'react';\r\nimport Layers from \"./Layers\";\r\nimport \"./Sidebar.css\";\r\nimport Buffer from './tools/Buffer';\r\nimport Dissolve from './tools/Dissolve';\r\nimport Union from './tools/Union';\r\nimport Intersect from './tools/Intersect';\r\nimport Difference from './tools/Difference';\r\nimport { get_newgeojson } from '../Map/MainMap'\r\nimport { createLayer } from './Layers'\r\nimport $ from \"jquery\";\r\nimport L from 'leaflet';\r\nvar turf = require('@turf/turf')\r\n\r\n// Gets call from Buffer and sends data to MainMap and Layer\r\nexport function callBuffer(buffer_radius, geojson_file_key) {\r\n  var layer_position = find_called_geojson(geojson_file_key)\r\n  var selected_layer_geojson = collect_called_geojson(layer_position)\r\n  var selected_layer_name = this.state.layer_list[layer_position][0]\r\n  var buffered = turf.buffer(selected_layer_geojson, buffer_radius, {units: 'meters'});\r\n\r\n  // Runs dissolve on the buffer, so we don't get overlapping buffer zones.\r\n  var buffer_dissolved = buffered.features[0]\r\n  for (var i = 1; i < buffered.features.length; i++) {\r\n    buffer_dissolved = turf.union(buffer_dissolved, buffered.features[i])\r\n  }\r\n\r\n  // Cleans the returned dissolve data.\r\n  if (buffer_dissolved.geometry.type == 'MultiPolygon') {\r\n    var multipolygon = {\"type\":\"FeatureCollection\",\"features\": [buffer_dissolved]};\r\n    final_buffer = geojsonMultiPolygonToPolygon(multipolygon)\r\n  } else {\r\n    var final_buffer = {\"type\":\"FeatureCollection\",\"features\": [buffer_dissolved]};\r\n  }\r\n\r\n  const buffer_layer_key = generateKey()\r\n  get_newgeojson(final_buffer, buffer_layer_key)\r\n  createLayer(selected_layer_name+' '+buffer_radius+' m buffer', buffer_layer_key, final_buffer)\r\n}\r\n\r\n// Gets call from Dissolve and sends data to MainMap and Layer\r\nexport function callDissolve(geojson_file_key) {\r\n  /* The Turf.JS code for dissolve is not working as intended (said by author).\r\n  Therefore we use union instead, on all polygons within geojson file. */\r\n  var layer_position = find_called_geojson(geojson_file_key)\r\n  var selected_layer_geojson = collect_called_geojson(layer_position)\r\n  var selected_layer_name = this.state.layer_list[layer_position][0]\r\n\r\n  var dissolveLayer = selected_layer_geojson.features[0]\r\n\r\n  for (var i = 1; i < selected_layer_geojson.features.length; i++) {\r\n    dissolveLayer = turf.union(dissolveLayer, selected_layer_geojson.features[i])\r\n  }\r\n\r\n  // Cleans the returned dissolve data.\r\n  if (dissolveLayer.geometry.type == 'MultiPolygon') {\r\n    var multipolygon = {\"type\":\"FeatureCollection\",\"features\": [dissolveLayer]};\r\n    final_dissolve = geojsonMultiPolygonToPolygon(multipolygon)\r\n  } else {\r\n    var final_dissolve = {\"type\":\"FeatureCollection\",\"features\": [dissolveLayer]};\r\n  }\r\n\r\n  const dissolve_layer_key = generateKey()\r\n  get_newgeojson(final_dissolve, dissolve_layer_key)\r\n  createLayer(selected_layer_name+' dissolved', dissolve_layer_key, final_dissolve)\r\n}\r\n\r\n// Gets call from Union and sends data to MainMap and Layer\r\nexport function callUnion(geojson_file_key1, geojson_file_key2) {\r\n  /*NOTE:  As the union function uses polygons not geojson files as input,\r\n  we need to seperate the geojson files into features and merge all of them. */\r\n\r\n  // gets the data for the first geojson file stored in memory.\r\n  var layer_position1 = find_called_geojson(geojson_file_key1)\r\n  var selected_layer_geojson1 = collect_called_geojson(layer_position1)\r\n  var selected_layer_name1 = this.state.layer_list[layer_position1][0]\r\n  // gets the data for the second geojson file stored in memory.\r\n  var layer_position2 = find_called_geojson(geojson_file_key2)\r\n  var selected_layer_geojson2 = collect_called_geojson(layer_position2)\r\n  var selected_layer_name2 = this.state.layer_list[layer_position2][0]\r\n\r\n  // combines the geojson files into one, in case we have mulitple features in one of them.\r\n  var unionLayer = {\r\n    \"type\" : \"FeatureCollection\",\r\n    \"features\": [...selected_layer_geojson1.features, ...selected_layer_geojson2.features]\r\n  }\r\n\r\n  const union_layer_key = generateKey()\r\n  get_newgeojson(unionLayer, union_layer_key)\r\n  createLayer('union '+selected_layer_name1+' & '+selected_layer_name2, union_layer_key, unionLayer)\r\n\r\n}\r\n\r\nexport function callIntersect(geojson_file_key1, geojson_file_key2) {\r\n  /*NOTE: Intersect also uses features, so we need to do a similar combination as with union. */\r\n\r\n  // gets the data for the first geojson file stored in memory.\r\n  var layer_position1 = find_called_geojson(geojson_file_key1)\r\n  var selected_layer_geojson1 = collect_called_geojson(layer_position1)\r\n  var selected_layer_name1 = this.state.layer_list[layer_position1][0]\r\n  // gets the data for the second geojson file stored in memory.\r\n  var layer_position2 = find_called_geojson(geojson_file_key2)\r\n  var selected_layer_geojson2 = collect_called_geojson(layer_position2)\r\n  var selected_layer_name2 = this.state.layer_list[layer_position2][0]\r\n\r\n  // Make a list of all the features in both Geojson files.\r\n  var f1 = selected_layer_geojson1.features\r\n  var f2 = selected_layer_geojson2.features\r\n\r\n\r\n  var conflictlist = [];\r\n\r\n  for (var i = 0; i < f1.length; i++) {\r\n      var parcel1 = f1[i];\r\n\r\n      for (var j = 0; j <f2.length; j++) {\r\n\r\n          var parcel2 = f2[j];\r\n\r\n              var conflict = turf.intersect(parcel1, parcel2);\r\n              if (conflict != null) {\r\n                  conflictlist.push(conflict);\r\n              }\r\n      }\r\n  }\r\n\r\n  var lg = new L.LayerGroup();\r\n  var intersectLayer = {\"type\":\"FeatureCollection\",\"features\": conflictlist};\r\n\r\n  const intersect_layer_key = generateKey()\r\n  get_newgeojson(intersectLayer, intersect_layer_key)\r\n  createLayer('intersect '+selected_layer_name1+' & '+selected_layer_name2, intersect_layer_key, intersectLayer)\r\n}\r\n\r\nexport function callDifference(geojson_file_key1, geojson_file_key2) {\r\n  /*NOTE: Difference also uses features (single Polygon or MultiPolygon), so we need to make sure all features are either a singe polygon\r\n    or a geojson file with a MultiPolygon geometry type.*/\r\n\r\n  // gets the data for the first geojson file stored in memory.\r\n  var layer_position1 = find_called_geojson(geojson_file_key1)\r\n  var selected_layer_geojson1 = collect_called_geojson(layer_position1)\r\n  var selected_layer_name1 = this.state.layer_list[layer_position1][0]\r\n  // gets the data for the second geojson file stored in memory.\r\n  var layer_position2 = find_called_geojson(geojson_file_key2)\r\n  var selected_layer_geojson2 = collect_called_geojson(layer_position2)\r\n  var selected_layer_name2 = this.state.layer_list[layer_position2][0]\r\n\r\n  console.log(\"geo1\")\r\n  console.log(selected_layer_geojson1)\r\n  console.log(\"geo2\")\r\n  console.log(selected_layer_geojson2)\r\n\r\n\r\n  // Takes the selected geojson files and converts them to MultiPolygon geometry.\r\n  var difference1 = geojsonPolygonToMultiPolygon(selected_layer_geojson1)\r\n  var difference2 = geojsonPolygonToMultiPolygon(selected_layer_geojson2)\r\n\r\n  // Runs the difference algorithm on the two multipolygon files.\r\n  var difference = turf.difference(difference1.features[0], difference2.features[0])\r\n\r\n\r\n  // Merges the difference layer into a new geojson file.\r\n  if (difference == null) {\r\n    difference = null\r\n  } else {\r\n    var differenceLayer_multipolygon = {\"type\":\"FeatureCollection\",\"features\": [difference]};\r\n    var differenceLayer = geojsonMultiPolygonToPolygon(differenceLayer_multipolygon)\r\n  }\r\n\r\n\r\n  const difference_layer_key = generateKey()\r\n  get_newgeojson(differenceLayer, difference_layer_key)\r\n  createLayer(selected_layer_name1+' - '+selected_layer_name2, difference_layer_key, differenceLayer)\r\n\r\n}\r\n\r\n// Converts a geojson consisting with mulitple polygons into a geojson file with MultiPolygon geometry for difference function.\r\nexport function geojsonPolygonToMultiPolygon(geojson) {\r\n  var geojson_features = geojson.features\r\n\r\n  var coordinates = []\r\n\r\n  for (var i = 0; i < geojson_features.length; i++) {\r\n      if(geojson_features[i].geometry.type == 'Polygon') {\r\n        coordinates.push(geojson_features[i].geometry.coordinates)\r\n      } else if(geojson_features[i].geometry.type == 'LineString') {\r\n        var feature = turf.buffer(geojson_features[i].geometry, 0.5)\r\n        coordinates.push(feature.geometry.coordinates)\r\n      } else if (geojson_features[i].geometry.type == 'MultiPolygon'){\r\n        coordinates.push(geojson_features[i].geometry.coordinates)\r\n      } else if(geojson_features[i].geometry.type == 'Point') {\r\n        var feature = turf.buffer(geojson_features[i].geometry, 0.5)\r\n        coordinates.push(feature.geometry.coordinates)\r\n      }\r\n  }\r\n  var new_geojson = {\"type\":\"FeatureCollection\",\"features\":[{\"type\": \"Feature\", \"properties\": {},  \"geometry\": { \"type\": \"MultiPolygon\", \"coordinates\": coordinates }}]};\r\n  return new_geojson\r\n}\r\n\r\n/* Converts a geojson consisting of MultiPolygon to  a geojson file separate Polygons.\r\nNote: This function exists to revert geojson files back to single polygons, in order to:\r\na) Keep the data consistent. b) Single polygons are required for some functions (e.g Dissolve) */\r\nexport function geojsonMultiPolygonToPolygon(geojson) {\r\n  var geojson_features = geojson.features\r\n\r\n  var new_features = []\r\n  for (var i = 0; i < geojson_features.length; i++) {\r\n    if(geojson_features[i].geometry.type == 'Polygon') {\r\n      new_features.push(geojson_features[i])\r\n    } else if(geojson_features[i].geometry.type == 'MultiPolygon') {\r\n      for (var j = 0; j < geojson_features[i].geometry.coordinates.length; j++) {\r\n        var feature = {\"type\": \"Feature\", \"properties\": {},  \"geometry\": { \"type\": \"Polygon\", \"coordinates\": geojson_features[i].geometry.coordinates[j] }}\r\n        new_features.push(feature)\r\n      }\r\n    }\r\n  }\r\n  var new_geojson = {\"type\":\"FeatureCollection\",\"features\": new_features };\r\n  return new_geojson\r\n\r\n}\r\n\r\nexport function deleteLayerCall(geojson_file_key) {\r\n  var layer_position = find_called_geojson(geojson_file_key)\r\n  var selected_layer_geojson = this.state.layer_list[layer_position][2]\r\n  // Removes the layer for the selected geojson file in sidebar and in the selection part of the Tools.\r\n  $( \"#\"+geojson_file_key+\"\" ).remove();\r\n  $( \"#layer_\"+geojson_file_key+\"\" ).remove();\r\n\r\n  // Removes the geojson layers from the map.\r\n  $( \".\"+geojson_file_key+\"\" ).remove();\r\n\r\n  // TODO: Remove layer from UNION\r\n}\r\n\r\n// Finds position in layer list for geojson based on key value.\r\nfunction find_called_geojson(geojson_file_key){\r\n  for (var i = 0; i < this.state.layer_list.length; i++) {\r\n    if (geojson_file_key == this.state.layer_list[i][1]){\r\n      return i\r\n    }\r\n  }\r\n}\r\n\r\n// Returns the geojson file, in a format suited for the operations.\r\nexport function collect_called_geojson(geojson_file_position){\r\n  var geojson_file = this.state.layer_list[geojson_file_position][2]\r\n  // If file is a FeatureCollection, we can simply return it.\r\n  return geojson_file\r\n\r\n\r\n}\r\n\r\n// Generate new layer layer key\r\nfunction generateKey() {\r\n  return Math.random().toString(36).substr(2, 9);\r\n}\r\n\r\n// Fetches GeoJSON properties from Layer and passes them on to MainMap.\r\nexport function new_geojsonToParent(new_geojson, newest_file_key) {\r\n  get_newgeojson(new_geojson, newest_file_key)\r\n}\r\n\r\n// Function that takes in all kinds of GeoJSON/JSON map data and cleans it.\r\nexport function clean_data(new_geojson) {\r\n  if (new_geojson.type == 'Polygon') {\r\n    var geojson = {\"type\":\"FeatureCollection\",\"features\":[{\"type\": \"Feature\", \"properties\": {},  \"geometry\": { \"type\": \"Polygon\", \"coordinates\": new_geojson.coordinates }}]};\r\n    return geojson\r\n  } else if (new_geojson.type == 'MultiPolygon') {\r\n      return geojsonMultiPolygonToPolygon(new_geojson)\r\n  } else if (new_geojson.type == 'Point') {\r\n    var circle = turf.circle(new_geojson.coordinates, 2)\r\n    var geojson = {\"type\":\"FeatureCollection\",\"features\": circle };\r\n    return geojson\r\n  }\r\n\r\n}\r\n\r\n// Fetches layer_list from layers, in order to send geojson data to MainMap.\r\nexport function getLayerList(layer_list) {\r\n  this.setState({ layer_list })\r\n}\r\n\r\nclass Sidebar extends Component {\r\n  constructor(props){\r\n    super(props)\r\n    this.state = {\r\n      layer_list: []\r\n    }\r\n    callBuffer = callBuffer.bind(this)\r\n    callDissolve = callDissolve.bind(this)\r\n    callUnion = callUnion.bind(this)\r\n    callIntersect = callIntersect.bind(this)\r\n    callDifference = callDifference.bind(this)\r\n    new_geojsonToParent = new_geojsonToParent.bind(this)\r\n    getLayerList = getLayerList.bind(this)\r\n    find_called_geojson = find_called_geojson.bind(this)\r\n    deleteLayerCall = deleteLayerCall.bind(this)\r\n    collect_called_geojson = collect_called_geojson.bind(this)\r\n\r\n  }\r\n\r\n  render() {\r\n    return ([\r\n      <div id=\"sidebar_content\">\r\n          <div id=\"sidebar_title_div\">\r\n              <a href=\"http://www.anstra.no/\" target=\"_blank\" id=\"title\">StrandGIS</a>\r\n          </div>\r\n          <div id=\"tools\">\r\n              <p id=\"subtitle\">Tools</p>\r\n              <ul id=\"tool_layer\">\r\n                  <li className=\"buffer\">\r\n                      Buffer {this.state.buffer_radius}\r\n                  </li>\r\n                  <li hidden className=\"buffer_content\"><Buffer/></li>\r\n                  <li className=\"dissolve\">\r\n                      Dissolve\r\n                  </li>\r\n                  <li hidden className=\"dissolve_content\"><Dissolve/></li>\r\n                  <li className=\"union\">\r\n                      Union\r\n                  </li>\r\n                  <li hidden className=\"union_content\"><Union/></li>\r\n                  <li className=\"intersect\">\r\n                      Intersect\r\n                  </li>\r\n                  <li hidden className=\"intersect_content\"><Intersect/></li>\r\n                  <li className=\"difference\">\r\n                      Difference\r\n                  </li>\r\n                  <li hidden className=\"difference_content\"><Difference/></li>\r\n                  <li className=\"extract\">\r\n                      Extract Feature\r\n                  </li>\r\n                  <li hidden className=\"extract_content\"></li>\r\n              </ul>\r\n          </div>\r\n          <div id='Layers'>\r\n              <Layers/>\r\n          </div>\r\n      </div>\r\n    ])\r\n  }\r\n}\r\n\r\nexport default Sidebar;\r\n","import React, { Component } from 'react';\r\nimport MainMap from \"./Map/MainMap\"\r\nimport Sidebar from \"./sidebar/Sidebar\"\r\nimport \"./App.css\"\r\n\r\nclass App extends Component {\r\n    render() {\r\n        return ([\r\n          <div id='page_content'>\r\n            <MainMap key='mainmap_key'/>\r\n            <div id='sidebar'>\r\n              <Sidebar key='sidebar_key'/>\r\n            </div>\r\n          </div>\r\n        ])\r\n      }\r\n}\r\n\r\nexport default App;\r\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'leaflet/dist/leaflet.css';\nimport './index.css';\nimport App from './App';\nimport registerServiceWorker from './registerServiceWorker';\nimport $ from \"jquery\";\n\n\nReactDOM.render(<App />, document.getElementById('root'));\nregisterServiceWorker();\n\n\n\n$( '.buffer' ).click(function() {\n    $('.buffer_content').toggle();\n});\n\n$( '.dissolve' ).click(function() {\n    $('.dissolve_content').toggle();\n});\n\n$( '.intersection' ).click(function() {\n   console.log(\"Intersect\")\n});\n\n$( '.union' ).click(function() {\n  $('.union_content').toggle();\n});\n\n$( '.intersect' ).click(function() {\n  $('.intersect_content').toggle();\n});\n\n$( '.difference' ).click(function() {\n  $('.difference_content').toggle();\n});\n"],"sourceRoot":""}