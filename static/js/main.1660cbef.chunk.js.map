{"version":3,"sources":["Map/MainMap.js","sidebar/tools/Union.js","sidebar/tools/Intersect.js","sidebar/tools/Difference.js","sidebar/Layers.js","sidebar/tools/Buffer.js","sidebar/tools/Dissolve.js","sidebar/Sidebar.js","App.js","registerServiceWorker.js","index.js"],"names":["config","get_newgeojson","new_geojson","new_geojson_key","geojson","geojson_key","console","log","this","setState","params","center","zoomControl","zoom","scrollwheel","legends","infoControl","attributionControl","tileLayer","uri","attribution","id","accessToken","MainMap","props","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","map","geojsonLayer","_mapNode","onEachFeature","bind","assertThisInitialized","init","prevProps","prevState","addGeoJSONLayer","remove","key","L","geoJson","setStyle","className","addTo","target","feature","layer","properties","NAME","popupContent","concat","bindPopup","control","position","scale","_this2","lat","lng","react_default","a","createElement","ref","node","Component","getLayerListUnion","layer_list","Union","layer_data_list","data","i","length","push","name","listItems","d","value","slice","onClick","param","executeUnion","union_select1","document","getElementById","geojson1","options","selectedIndex","union_select2","callUnion","getLayerListIntersect","Intersect","executeIntersect","intersect_select1","intersect_select2","callIntersect","getLayerListDifference","Difference","executeDifference","difference_select1","difference_select2","callDifference","createLayer","newest_file_name","newest_file_key","toConsumableArray","addLayerProperties","getElementsByClassName","addEventListener","current","replace","Sortable","create","onEnd","e","layers","g","getElementsByTagName","map_layer","$","appendTo","reorderLayers","list_order","class_name","split","getLayers","Layers","readGeoJSONFile","getLayerList","deleteLayer","type","onChange","accept","hidden","activateFileUpload","click","deleteLayerCall","attr","file_upload","file","files","Math","random","toString","substr","reader","FileReader","onload","JSON","parse","result","new_geojsonToParent","readAsText","alert","Buffer","require","placeholder","executeBuffer","callBuffer","Dissolve","executeDissolve","callDissolve","turf","buffer_radius","geojson_file_key","layer_position","find_called_geojson","selected_layer_geojson","collect_called_geojson","selected_layer_name","buffered","buffer","units","buffer_layer_key","generateKey","dissolved","dissolve","dissolve_layer_key","geojson_file_key1","geojson_file_key2","layer_position1","selected_layer_geojson1","selected_layer_name1","layer_position2","selected_layer_geojson2","selected_layer_name2","unionLayer","features","union_layer_key","f1","f2","conflictlist","parcel1","j","parcel2","conflict","intersect","LayerGroup","intersectLayer","intersect_layer_key","difference1","geojsonPolygonToMultiPolygon","difference2","differenceLayer","geojson_features","new_features","geometry","coordinates","geojsonMultiPolygonToPolygon","difference","difference_layer_key","geojson_file_position","geojson_file","Sidebar","sidebar_tools_Buffer","sidebar_tools_Dissolve","sidebar_tools_Union","sidebar_tools_Intersect","sidebar_tools_Difference","src_sidebar_Layers","App","src_Map_MainMap","src_sidebar_Sidebar","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","catch","error","ReactDOM","render","src_App_0","URL","process","origin","fetch","response","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker","toggle"],"mappings":"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","file":"static/js/main.1660cbef.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport L from 'leaflet';\r\nimport 'leaflet/dist/leaflet.css';\r\nimport 'leaflet-draw/dist/leaflet.draw.css';\r\nimport {Map, TileLayer, Popup, GeoJSON, FeatureGroup, Circle} from 'react-leaflet';\r\nimport './MainMap.css';\r\nimport $ from \"jquery\";\r\n// store the map configuration properties in an object,\r\n// we could also move this to a separate file & import it if desired.\r\nlet config = {};\r\nconfig.params = {\r\n  center: [63.43,10.4],\r\n  zoomControl: false,\r\n  zoom: 12,\r\n  scrollwheel: false,\r\n  legends: true,\r\n  infoControl: false,\r\n  attributionControl: true\r\n};\r\nconfig.tileLayer = {\r\n  uri: 'https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png',\r\n  params: {\r\n    attribution: '&copy; <a href=\"http://www.openstreetmap.org/copyright\">OpenStreetMap</a>',\r\n    id: '',\r\n    accessToken: ''\r\n  }\r\n};\r\n\r\n// Gets call from Sidebar to add geojson file to the map.\r\nexport function get_newgeojson(new_geojson, new_geojson_key) {\r\n  var geojson = new_geojson\r\n  var geojson_key = new_geojson_key\r\n  console.log(\"MAIN MAP GET NEW GEOJSON.\")\r\n  console.log(geojson)\r\n  this.setState({ geojson, geojson_key })\r\n}\r\n\r\nclass MainMap extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      map: null,\r\n      tileLayer: null,\r\n      geojsonLayer: null,\r\n      geojson: null,\r\n      geojson_key: null,\r\n    };\r\n    this._mapNode = null;\r\n    this.onEachFeature = this.onEachFeature.bind(this);\r\n    get_newgeojson = get_newgeojson.bind(this)\r\n  }\r\n\r\n  // code to run just after the component \"mounts\" / DOM elements are created\r\n  componentDidMount() {\r\n    // creates the Leaflet map object\r\n    if (!this.state.map) this.init(this._mapNode);\r\n  }\r\n\r\n  // code to run when the component receives prop or state updates.\r\n  componentDidUpdate(prevProps, prevState) {\r\n    // Render map again if new geojson data is added.\r\n    if (this.state.geojson !== prevState.geojson){\r\n      this.addGeoJSONLayer(this.state.geojson, this.state.geojson_key);\r\n    }\r\n  }\r\n  // code to run just before unmounting the component\r\n  componentWillUnmount() {\r\n    // this destroys the Leaflet map object & related event listeners\r\n    this.state.map.remove();\r\n  }\r\n\r\n\r\n\r\n// Adds geojson layer to map, while giving it required features and class name\r\n  addGeoJSONLayer(geojson, key) {\r\n    const geojsonLayer = L.geoJson(geojson, {\r\n      onEachFeature: this.onEachFeature,\r\n    });\r\n\r\n    // add our GeoJSON layer to the Leaflet map object\r\n    if (this.state.geojson_key !== null) {\r\n      geojsonLayer.setStyle({'className': 'map-path '+this.state.geojson_key}); //will add key id to geojson layer.\r\n    } else {\r\n      geojsonLayer.setStyle({'className': 'map-path'}); //will add the required class\r\n    }\r\n    geojsonLayer.addTo(this.state.map);\r\n\r\n    // store the Leaflet GeoJSON layer in our component state.\r\n    this.setState({ geojsonLayer });\r\n   }\r\n\r\n  zoomToFeature(target) {\r\n    var fitBoundsParams = {\r\n      paddingTopLeft: [200,10],\r\n      paddingBottomRight: [10,10]\r\n    };\r\n  }\r\n\r\n  onEachFeature(feature, layer) {\r\n    if (feature.properties && feature.properties.NAME) {\r\n\r\n      // assemble the HTML for the markers' popups (Leaflet's bindPopup method doesn't accept React JSX)\r\n      const popupContent = `<h3>${feature.properties.NAME}</h3>`\r\n\r\n      // add our popups\r\n      layer.bindPopup(popupContent);\r\n\r\n    }\r\n\r\n\r\n}\r\n\r\n  // Initializs the map\r\n  init(id) {\r\n    if (this.state.map) return;\r\n    // this function creates the Leaflet map object and is called after the Map component mounts\r\n    let map = L.map(id, config.params);\r\n    L.control.zoom({ position: \"bottomleft\"}).addTo(map);\r\n    L.control.scale({ position: \"bottomleft\"}).addTo(map);\r\n\r\n    // a TileLayer is used as the \"basemap\"\r\n    const tileLayer = L.tileLayer(config.tileLayer.uri, config.tileLayer.params).addTo(map);\r\n\r\n    // set our state to include the tile layer\r\n    this.setState({ map, tileLayer });\r\n  }\r\n\r\n  render() {\r\n    //Set the map position and zoom level\r\n    const position = [this.state.lat, this.state.lng]\r\n\r\n    return (\r\n      <div id=\"mapUI\">\r\n         <div ref={(node) => this._mapNode = node} id=\"map\" />\r\n     </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport function reorderLayers(layers) {\r\n  var i;\r\n  var g = document.getElementsByTagName(\"g\");\r\n  for (i=layers.length; i > -1; i--){\r\n    var map_layer = document.getElementsByClassName(layers[i]+\" leaflet-interactive\")[0]\r\n    console.log(map_layer)\r\n    $(map_layer).appendTo(g);\r\n  }\r\n}\r\n\r\n\r\n\r\nexport default MainMap;\r\n","import React, { Component } from 'react';\r\nimport \"./Union.css\"\r\nimport { callUnion } from '../Sidebar.js'\r\nimport $ from \"jquery\";\r\n\r\n\r\n// Fetches layer_list from layers, in order to get selection data.\r\nexport function getLayerListUnion(layer_list) {\r\n  this.setState({ layer_list })\r\n}\r\n\r\nclass Union extends Component{\r\n  constructor(props){\r\n    super(props)\r\n    this.state = {\r\n      layer_list: []\r\n    }\r\n    getLayerListUnion = getLayerListUnion.bind(this);\r\n  }\r\n\r\n  render(){\r\n    // Parses through all layers stored in memory and add them to the select lists.\r\n    const layer_data_list = this.state.layer_list\r\n    var data = []\r\n    for (var i = 0; i < layer_data_list.length; i++) {\r\n      data.push({\"name\":layer_data_list[i][0],\"key\":layer_data_list[i][1]})\r\n    }\r\n    const listItems = data.map((d) => <option className={d.key} value={d.key}>{d.name.slice(0,30)}</option>)\r\n\r\n    return(\r\n      <div>\r\n        <p>Select the 2 layers you want to unite.</p>\r\n        <select id=\"union_select_geojson1\">\r\n          {listItems}\r\n        </select>\r\n        <select id=\"union_select_geojson2\">\r\n          {listItems}\r\n        </select>\r\n        <button onClick={(param) => this.executeUnion(param)}>Apply</button>\r\n      </div>\r\n    )\r\n}\r\n\r\n    // Sends call to Sidebar to run Union code.\r\n    executeUnion(){\r\n      // Collects chosen layers from select list.\r\n      var union_select1 = document.getElementById(\"union_select_geojson1\");\r\n      var geojson1 = union_select1.options[union_select1.selectedIndex].value;\r\n      var union_select2 = document.getElementById(\"union_select_geojson2\");\r\n      var geojson2 = union_select2.options[union_select2.selectedIndex].value;\r\n      callUnion(geojson1, geojson2)\r\n    }\r\n\r\n\r\n}\r\n\r\nexport default Union;\r\n","import React, { Component } from 'react';\r\nimport \"./Intersect.css\"\r\nimport { callIntersect } from '../Sidebar.js'\r\nimport $ from \"jquery\";\r\n\r\n\r\n// Fetches layer_list from layers, in order to get selection data.\r\nexport function getLayerListIntersect(layer_list) {\r\n  this.setState({ layer_list })\r\n}\r\n\r\nclass Intersect extends Component{\r\n  constructor(props){\r\n    super(props)\r\n    this.state = {\r\n      layer_list: []\r\n    }\r\n    getLayerListIntersect = getLayerListIntersect.bind(this);\r\n  }\r\n\r\n  render(){\r\n    // Parses through all layers stored in memory and add them to the select lists.\r\n    const layer_data_list = this.state.layer_list\r\n    var data = []\r\n    for (var i = 0; i < layer_data_list.length; i++) {\r\n      data.push({\"name\":layer_data_list[i][0],\"key\":layer_data_list[i][1]})\r\n    }\r\n    const listItems = data.map((d) => <option className={d.key} value={d.key}>{d.name.slice(0,30)}</option>)\r\n\r\n    return(\r\n      <div>\r\n        <p>Select the 2 layers you want to intersect.</p>\r\n        <select id=\"intersect_select_geojson1\">\r\n          {listItems}\r\n        </select>\r\n        <select id=\"intersect_select_geojson2\">\r\n          {listItems}\r\n        </select>\r\n        <button onClick={(param) => this.executeIntersect(param)}>Apply</button>\r\n      </div>\r\n    )\r\n}\r\n\r\n    // Sends call to Sidebar to run Intersect.\r\n    executeIntersect(){\r\n      // Collects chosen layers from select list.\r\n      var intersect_select1 = document.getElementById(\"intersect_select_geojson1\");\r\n      var geojson1 = intersect_select1.options[intersect_select1.selectedIndex].value;\r\n      var intersect_select2 = document.getElementById(\"intersect_select_geojson2\");\r\n      var geojson2 = intersect_select2.options[intersect_select2.selectedIndex].value;\r\n      callIntersect(geojson1, geojson2)\r\n    }\r\n\r\n\r\n}\r\n\r\nexport default Intersect;\r\n","import React, { Component } from 'react';\r\nimport \"./Difference.css\"\r\nimport { callDifference } from '../Sidebar.js'\r\nimport $ from \"jquery\";\r\n\r\n\r\n// Fetches layer_list from layers, in order to get selection data.\r\nexport function getLayerListDifference(layer_list) {\r\n  this.setState({ layer_list })\r\n}\r\n\r\nclass Difference extends Component{\r\n  constructor(props){\r\n    super(props)\r\n    this.state = {\r\n      layer_list: []\r\n    }\r\n    getLayerListDifference = getLayerListDifference.bind(this);\r\n  }\r\n\r\n  render(){\r\n    // Parses through all layers stored in memory and add them to the select lists.\r\n    const layer_data_list = this.state.layer_list\r\n    var data = []\r\n    for (var i = 0; i < layer_data_list.length; i++) {\r\n      data.push({\"name\":layer_data_list[i][0],\"key\":layer_data_list[i][1]})\r\n    }\r\n    const listItems = data.map((d) => <option className={d.key} value={d.key}>{d.name.slice(0,30)}</option>)\r\n\r\n    return(\r\n      <div>\r\n        <p>Select the 2 layers you want to difference.</p>\r\n        <select id=\"difference_select_geojson1\">\r\n          {listItems}\r\n        </select>\r\n        <select id=\"difference_select_geojson2\">\r\n          {listItems}\r\n        </select>\r\n        <button onClick={(param) => this.executeDifference(param)}>Apply</button>\r\n      </div>\r\n    )\r\n}\r\n\r\n    // Sends call to Sidebar to run Intersect.\r\n    executeDifference(){\r\n      // Collects chosen layers from select list.\r\n      var difference_select1 = document.getElementById(\"difference_select_geojson1\");\r\n      var geojson1 = difference_select1.options[difference_select1.selectedIndex].value;\r\n      var difference_select2 = document.getElementById(\"difference_select_geojson2\");\r\n      var geojson2 = difference_select2.options[difference_select2.selectedIndex].value;\r\n      callDifference(geojson1, geojson2)\r\n    }\r\n\r\n\r\n}\r\n\r\nexport default Difference;\r\n","import React, { Component } from 'react';\r\nimport Sortable from 'sortablejs';\r\nimport './Layers.css';\r\nimport { new_geojsonToParent, getLayerList, deleteLayerCall } from './Sidebar.js'\r\nimport { reorderLayers } from '../Map/MainMap'\r\nimport { getLayerListUnion } from './tools/Union.js'\r\nimport { getLayerListIntersect } from './tools/Intersect.js'\r\nimport { getLayerListDifference } from './tools/Difference.js'\r\nimport $ from \"jquery\";\r\n\r\n\r\n// Class that handles layer logic and uploading of files.\r\nclass Layers extends Component{\r\n  constructor(props){\r\n    super(props)\r\n    this.state = {\r\n      layer_list: []\r\n    }\r\n    this.readGeoJSONFile = this.readGeoJSONFile.bind(this);\r\n    createLayer = createLayer.bind(this);\r\n  }\r\n\r\n  componentDidUpdate(prevProps, prevState) {\r\n    // Appending new file name to Layer list with a unique key value.\r\n    if (this.state.layer_list !== prevState.layer_list ){\r\n      getLayerList(this.state.layer_list)\r\n      getLayerListUnion(this.state.layer_list)\r\n      getLayerListIntersect(this.state.layer_list)\r\n      getLayerListDifference(this.state.layer_list)\r\n    }\r\n\r\n    // Make all the new layers selectable and dragable.\r\n    addLayerProperties()\r\n  }\r\n\r\n  componentDidMount() {\r\n    // Make the initial layers selectable and dragable.\r\n    addLayerProperties()\r\n  }\r\n\r\n  render(){\r\n    // Parses through all layers stored in memory and add them to the Layer list.\r\n    const layer_data_list = this.state.layer_list\r\n    var data = []\r\n    for (var i = 0; i < layer_data_list.length; i++) {\r\n      data.push({\"name\":layer_data_list[i][0],\"key\":layer_data_list[i][1]})\r\n    }\r\n    const listItems = data.map((d) => <li className=\"layer\" id={d.key}>{d.name}</li>)\r\n\r\n    return(\r\n      <div id=\"layers\">\r\n          <p id=\"subtitle\">Layers</p>\r\n          <button id=\"delete\" onClick={(param) => this.deleteLayer(param)}>[TRASH]</button>\r\n          <p id='sub_info'>Click to select, drag to reorder.</p>\r\n          <div>\r\n              <ul id=\"sortable_layers\" className=\"ui-sortable\">\r\n                  {listItems}\r\n              </ul>\r\n          </div>\r\n          <div>\r\n            <p id=\"subtitle\">Add Layer</p>\r\n            <div>\r\n              {/* Hidden input field to handle file upload on button click. */}\r\n              <input id='fileid' type='file' onChange={(param) => this.readGeoJSONFile(param)} accept=\".GeoJSON,.JSON\" hidden/>\r\n              <button id=\"upload\" onClick={(param) => this.activateFileUpload(param)}>Upload file</button>\r\n            </div>\r\n            <p id='sub_info'>Click button and upload GeoJSON or JSON file.</p>\r\n\r\n          </div>\r\n      </div>\r\n    )\r\n  }\r\n\r\n  // Checks if upload GeoJSON button has been clicked, and file has been selected.\r\n  activateFileUpload(){\r\n    document.getElementById('fileid').click();\r\n    document.getElementById('fileid').addEventListener('change', this.readGeoJSONFile, true);\r\n  }\r\n\r\n// Sends call to Sidebar to delete selected layer, when delete button is clicked.\r\n  deleteLayer(){\r\n    var delete_layer_key= ($('li.active').attr('id'));\r\n    deleteLayerCall(delete_layer_key)\r\n  }\r\n\r\n /*\r\n        TODO: ADD EXCEPTION HANDELING FOR FILE UPLOAD.\r\n */\r\n\r\n  // Adding file reading code in Layers as this is the only place it is used.\r\n  readGeoJSONFile(file_upload){\r\n    //Retrieving the first (and only!) File from the FileList object\r\n    var file = file_upload.target.files[0];\r\n    const newest_file_key = Math.random().toString(36).substr(2, 9);\r\n    //NOTE: Math.random should be unique (with less than 10.000 simulatanious layers) because of its seeding algorithm.\r\n    const newest_file_name = file.name;\r\n\r\n    if (file) {\r\n      var reader = new FileReader();\r\n      reader.onload = function(e) {\r\n        const new_geojson = JSON.parse(e.target.result)\r\n\r\n        // Sending the JSON extracted from file to Parent component.\r\n        new_geojsonToParent(new_geojson, newest_file_key)\r\n        createLayer(newest_file_name, newest_file_key, new_geojson)\r\n\r\n\r\n      }\r\n      reader.readAsText(file);\r\n    } else {\r\n      alert(\"Failed to load file\");\r\n    }\r\n\r\n\r\n  }\r\n}\r\n\r\n// helper function that collect read data and sets new state.\r\nexport function createLayer(newest_file_name, newest_file_key, new_geojson){\r\n  this.setState({\r\n    layer_list: [...this.state.layer_list, [newest_file_name, newest_file_key, new_geojson]]\r\n  })\r\n}\r\n\r\nfunction addLayerProperties() {\r\n  // Gets the class name for the layer list.\r\n  var layer_list = document.getElementById(\"sortable_layers\");\r\n\r\n  // Makes the sidebar layer list selectable.\r\n  var layer = layer_list.getElementsByClassName(\"layer\");\r\n  for (var i = 0; i < layer.length; i++) {\r\n      layer[i].addEventListener(\"click\", function() {\r\n          var current = document.getElementsByClassName(\"active\");\r\n          if (current[0]){\r\n          current[0].className = current[0].className.replace(\" active\", \"\");\r\n          }\r\n          this.className += \" active\";\r\n      });\r\n  }\r\n\r\n  // Makes the sidebar layer list sortable\r\n  Sortable.create(layer_list,{\r\n      onEnd: function (e){\r\n          // Reorders the layers based on ID name ordering.\r\n          reorderLayers(getLayers())\r\n      }\r\n  })\r\n\r\n  // Function that returns all layers (and their order.)\r\n  function getLayers(){\r\n      var i;\r\n      var list_order = [];\r\n      var a = document.getElementsByClassName(\"layer\")\r\n      for (i=0; i < a.length; i++){\r\n          var class_name = ((a[i].className).split(\" \"))\r\n          list_order.push(class_name[0])\r\n      }\r\n      return list_order;\r\n  }\r\n}\r\n\r\nexport default Layers;\r\n","import React, { Component } from 'react';\r\nimport \"./Buffer.css\"\r\nimport MainMap from '../../Map/MainMap'\r\nimport L from 'leaflet'\r\nimport { callBuffer } from '../Sidebar.js'\r\nimport geojson from '../../geojson/sor_trondelag.json';\r\nimport $ from \"jquery\";\r\nvar buffer = require('@turf/buffer')\r\nvar turf = require('@turf/turf')\r\n\r\n\r\nclass Buffer extends Component{\r\n  constructor(props) {\r\n    super(props)\r\n  }\r\n    render(){\r\n        return(\r\n        <div>\r\n           <div id=\"tool_title\">Distance:</div>\r\n           <input id=\"buffer_number\" type=\"number\" placeholder=\"Buffer in meters\"></input>\r\n           <br></br>\r\n           <button onClick={(param) => this.executeBuffer(param)}>Apply</button>\r\n        </div>\r\n        )\r\n    }\r\n\r\n    // Sends call to Sidebar to run Buffer code.\r\n    executeBuffer(){\r\n      var buffer_radius = document.getElementById('buffer_number').value;\r\n      var layer_key= ($('li.active').attr('id'));\r\n      callBuffer(buffer_radius, layer_key)\r\n    }\r\n}\r\n\r\n\r\n\r\nexport default Buffer;\r\n","import React, { Component } from 'react';\r\nimport \"./Dissolve.css\"\r\nimport { callDissolve } from '../Sidebar.js'\r\nimport $ from \"jquery\";\r\n\r\n\r\nclass Dissolve extends Component{\r\n    render(){\r\n        return(\r\n        <div>\r\n           <button onClick={(param) => this.executeDissolve(param)}>Apply</button>\r\n        </div>\r\n        )\r\n    }\r\n\r\n    // Sends call to Sidebar to run Buffer code.\r\n    executeDissolve(){\r\n      var layer_key= ($('li.active').attr('id'));\r\n      callDissolve(layer_key)\r\n    }\r\n}\r\n\r\nexport default Dissolve;\r\n","import React, { Component } from 'react';\r\nimport Layers from \"./Layers\";\r\nimport \"./Sidebar.css\";\r\nimport Buffer from './tools/Buffer';\r\nimport Dissolve from './tools/Dissolve';\r\nimport Union from './tools/Union';\r\nimport Intersect from './tools/Intersect';\r\nimport Difference from './tools/Difference';\r\nimport { get_newgeojson } from '../Map/MainMap'\r\nimport { createLayer } from './Layers'\r\nimport $ from \"jquery\";\r\nimport L from 'leaflet';\r\nvar turf = require('@turf/turf')\r\n\r\n// Gets call from Buffer and sends data to MainMap and Layer\r\nexport function callBuffer(buffer_radius, geojson_file_key) {\r\n  var layer_position = find_called_geojson(geojson_file_key)\r\n  var selected_layer_geojson = collect_called_geojson(layer_position)\r\n  var selected_layer_name = this.state.layer_list[layer_position][0]\r\n  var buffered = turf.buffer(selected_layer_geojson, buffer_radius, {units: 'meters'});\r\n  const buffer_layer_key = generateKey()\r\n  get_newgeojson(buffered, buffer_layer_key)\r\n  createLayer(selected_layer_name+' '+buffer_radius+' m buffer', buffer_layer_key, buffered)\r\n}\r\n\r\n// Gets call from Dissolve and sends data to MainMap and Layer\r\nexport function callDissolve(geojson_file_key) {\r\n  var layer_position = find_called_geojson(geojson_file_key)\r\n  var selected_layer_geojson = collect_called_geojson(layer_position)\r\n  var selected_layer_name = this.state.layer_list[layer_position][0]\r\n  var dissolved = turf.dissolve(selected_layer_geojson)\r\n  const dissolve_layer_key = generateKey()\r\n  get_newgeojson(dissolved, dissolve_layer_key)\r\n  createLayer(selected_layer_name+' dissolved', dissolve_layer_key, dissolved)\r\n}\r\n\r\n// Gets call from Union and sends data to MainMap and Layer\r\n\r\nexport function callUnion(geojson_file_key1, geojson_file_key2) {\r\n  /*NOTE:  As the union function uses polygons not geojson files as input,\r\n  we need to seperate the geojson files into features and merge all of them. */\r\n\r\n  // gets the data for the first geojson file stored in memory.\r\n  var layer_position1 = find_called_geojson(geojson_file_key1)\r\n  var selected_layer_geojson1 = collect_called_geojson(layer_position1)\r\n  var selected_layer_name1 = this.state.layer_list[layer_position1][0]\r\n  // gets the data for the second geojson file stored in memory.\r\n  var layer_position2 = find_called_geojson(geojson_file_key2)\r\n  var selected_layer_geojson2 = collect_called_geojson(layer_position2)\r\n  var selected_layer_name2 = this.state.layer_list[layer_position2][0]\r\n\r\n  // combines the geojson files into one, in case we have mulitple features in one of them.\r\n  var unionLayer = {\r\n    \"type\" : \"FeatureCollection\",\r\n    \"features\": [...selected_layer_geojson1.features, ...selected_layer_geojson2.features]\r\n  }\r\n\r\n  const union_layer_key = generateKey()\r\n  get_newgeojson(unionLayer, union_layer_key)\r\n  createLayer('union '+selected_layer_name1+' & '+selected_layer_name2, union_layer_key, unionLayer)\r\n\r\n}\r\n\r\nexport function callIntersect(geojson_file_key1, geojson_file_key2) {\r\n  /*NOTE: Intersect also uses features, so we need to do a similar combination as with union. */\r\n\r\n  // gets the data for the first geojson file stored in memory.\r\n  var layer_position1 = find_called_geojson(geojson_file_key1)\r\n  var selected_layer_geojson1 = collect_called_geojson(layer_position1)\r\n  var selected_layer_name1 = this.state.layer_list[layer_position1][0]\r\n  // gets the data for the second geojson file stored in memory.\r\n  var layer_position2 = find_called_geojson(geojson_file_key2)\r\n  var selected_layer_geojson2 = collect_called_geojson(layer_position2)\r\n  var selected_layer_name2 = this.state.layer_list[layer_position2][0]\r\n\r\n  // Make a list of all the features in both Geojson files.\r\n  var f1 = selected_layer_geojson1.features\r\n  var f2 = selected_layer_geojson2.features\r\n\r\n\r\n  var conflictlist = [];\r\n\r\n  for (var i = 0; i < f1.length; i++) {\r\n      var parcel1 = f1[i];\r\n\r\n      for (var j = 0; j <f2.length; j++) {\r\n\r\n          var parcel2 = f2[j];\r\n\r\n              var conflict = turf.intersect(parcel1, parcel2);\r\n              if (conflict != null) {\r\n                  conflictlist.push(conflict);\r\n              }\r\n      }\r\n  }\r\n\r\n  var lg = new L.LayerGroup();\r\n  var intersectLayer = {\"type\":\"FeatureCollection\",\"features\": conflictlist};\r\n\r\n  console.log(intersectLayer)\r\n  console.log(intersectLayer.features)\r\n\r\n  const intersect_layer_key = generateKey()\r\n  get_newgeojson(intersectLayer, intersect_layer_key)\r\n  createLayer('intersect '+selected_layer_name1+' & '+selected_layer_name2, intersect_layer_key, intersectLayer)\r\n}\r\n\r\nexport function callDifference(geojson_file_key1, geojson_file_key2) {\r\n  /*NOTE: Difference also uses features (single Polygon or MultiPolygon), so we need to make sure all features are either a singe polygon\r\n    or a geojson file with a MultiPolygon geometry type.*/\r\n\r\n  // gets the data for the first geojson file stored in memory.\r\n  var layer_position1 = find_called_geojson(geojson_file_key1)\r\n  var selected_layer_geojson1 = collect_called_geojson(layer_position1)\r\n  var selected_layer_name1 = this.state.layer_list[layer_position1][0]\r\n  // gets the data for the second geojson file stored in memory.\r\n  var layer_position2 = find_called_geojson(geojson_file_key2)\r\n  var selected_layer_geojson2 = collect_called_geojson(layer_position2)\r\n  var selected_layer_name2 = this.state.layer_list[layer_position2][0]\r\n\r\n  // Takes the selected geojson files and converts them to MultiPolygon geometry.\r\n  var difference1 = geojsonPolygonToMultiPolygon(selected_layer_geojson1)\r\n  var difference2 = geojsonPolygonToMultiPolygon(selected_layer_geojson2)\r\n\r\n  // Runs the difference algorithm on the two multipolygon files.\r\n  var difference = turf.difference(difference1.features[0], difference2.features[0])\r\n\r\n  // Merges the difference layer into a new geojson file.\r\n  var differenceLayer_multipolygon = {\"type\":\"FeatureCollection\",\"features\": [difference]};\r\n  var differenceLayer = geojsonMultiPolygonToPolygon(differenceLayer_multipolygon)\r\n\r\n  const difference_layer_key = generateKey()\r\n  get_newgeojson(differenceLayer, difference_layer_key)\r\n  createLayer(selected_layer_name1+' - '+selected_layer_name2, difference_layer_key, differenceLayer)\r\n\r\n}\r\n\r\n// Converts a geojson consisting with mulitple polygons into a geojson file with MultiPolygon geometry for difference function.\r\nexport function geojsonPolygonToMultiPolygon(geojson) {\r\n  var geojson_features = geojson.features\r\n  var coordinates = []\r\n\r\n  for (var i = 0; i < geojson_features.length; i++) {\r\n      if(geojson_features[i].geometry.type == 'Polygon') {\r\n        coordinates.push(geojson_features[i].geometry.coordinates)\r\n      }\r\n  }\r\n  var new_geojson = {\"type\":\"FeatureCollection\",\"features\":[{\"type\": \"Feature\", \"properties\": {},  \"geometry\": { \"type\": \"MultiPolygon\", \"coordinates\": coordinates }}]};\r\n  return new_geojson\r\n}\r\n\r\n/* Converts a geojson consisting of MultiPolygon to  a geojson file separate Polygons.\r\nNote: This function exists to revert geojson files back to single polygons, in order to:\r\na) Keep the data consistent. b) Single polygons are required for some functions (e.g Dissolve) */\r\nexport function geojsonMultiPolygonToPolygon(geojson) {\r\n  var geojson_features = geojson.features\r\n  var new_features = []\r\n\r\n  for (var i = 0; i < geojson_features.length; i++) {\r\n    console.log(geojson_features[i])\r\n    if(geojson_features[i].geometry.type == 'Polygon') {\r\n      new_features.push(geojson_features[i])\r\n    } else if(geojson_features[i].geometry.type == 'MultiPolygon') {\r\n      for (var j = 0; j < geojson_features[i].geometry.coordinates.length; j++) {\r\n        var feature = {\"type\": \"Feature\", \"properties\": {},  \"geometry\": { \"type\": \"Polygon\", \"coordinates\": geojson_features[i].geometry.coordinates[j] }}\r\n        new_features.push(feature)\r\n      }\r\n    }\r\n  }\r\n  var new_geojson = {\"type\":\"FeatureCollection\",\"features\": new_features };\r\n  return new_geojson\r\n\r\n}\r\n\r\nexport function deleteLayerCall(geojson_file_key) {\r\n  var layer_position = find_called_geojson(geojson_file_key)\r\n  var selected_layer_geojson = this.state.layer_list[layer_position][2]\r\n  // Removes the layer for the selected geojson file in sidebar and in the selection part of the Tools.\r\n  $( \"#\"+geojson_file_key+\"\" ).remove();\r\n  // Removes the geojson layers from the map.\r\n  $( \".\"+geojson_file_key+\"\" ).remove();\r\n\r\n  // TODO: Remove layer from UNION\r\n}\r\n\r\n// Finds position in layer list for geojson based on key value.\r\nfunction find_called_geojson(geojson_file_key){\r\n  for (var i = 0; i < this.state.layer_list.length; i++) {\r\n    if (geojson_file_key == this.state.layer_list[i][1]){\r\n      return i\r\n    }\r\n  }\r\n}\r\n\r\n// Returns the geojson file, in a format suited for the operations.\r\nexport function collect_called_geojson(geojson_file_position){\r\n  var geojson_file = this.state.layer_list[geojson_file_position][2]\r\n  // If file is a FeatureCollection, we can simply return it.\r\n  if (geojson_file.type == \"FeatureCollection\"){\r\n    return geojson_file\r\n  }\r\n  // If file is only a Polygon, we need to convert it into a FeatureCollection.\r\n  else if (geojson_file.type == \"Polygon\") {\r\n    var lg = new L.LayerGroup();\r\n    var geojson = {\"type\":\"FeatureCollection\",\"features\":[{\"type\": \"Feature\", \"properties\": {},  \"geometry\": { \"type\": \"Polygon\", \"coordinates\": geojson_file.coordinates }}]};\r\n    return geojson\r\n  }\r\n\r\n}\r\n\r\n// Generate new layer layer key\r\nfunction generateKey() {\r\n  return Math.random().toString(36).substr(2, 9);\r\n}\r\n\r\n// Fetches GeoJSON properties from Layer and passes them on to MainMap.\r\nexport function new_geojsonToParent(new_geojson, newest_file_key) {\r\n  get_newgeojson(new_geojson, newest_file_key)\r\n}\r\n\r\n// Fetches layer_list from layers, in order to send geojson data to MainMap.\r\nexport function getLayerList(layer_list) {\r\n  this.setState({ layer_list })\r\n}\r\n\r\nclass Sidebar extends Component {\r\n  constructor(props){\r\n    super(props)\r\n    this.state = {\r\n      layer_list: []\r\n    }\r\n    callBuffer = callBuffer.bind(this)\r\n    callDissolve = callDissolve.bind(this)\r\n    callUnion = callUnion.bind(this)\r\n    callIntersect = callIntersect.bind(this)\r\n    callDifference = callDifference.bind(this)\r\n    new_geojsonToParent = new_geojsonToParent.bind(this)\r\n    getLayerList = getLayerList.bind(this)\r\n    find_called_geojson = find_called_geojson.bind(this)\r\n    deleteLayerCall = deleteLayerCall.bind(this)\r\n    collect_called_geojson = collect_called_geojson.bind(this)\r\n\r\n  }\r\n\r\n  render() {\r\n    return ([\r\n      <div id=\"sidebar_content\">\r\n          <div id=\"sidebar_title_div\">\r\n              <h1 id=\"title\">App name</h1>\r\n          </div>\r\n          <div id=\"tools\">\r\n              <p id=\"subtitle\">Tools</p>\r\n              <ul id=\"tool_layer\">\r\n                  <li className=\"buffer\">\r\n                      Buffer {this.state.buffer_radius}\r\n                  </li>\r\n                  <li hidden className=\"buffer_content\"><Buffer/></li>\r\n                  <li className=\"dissolve\">\r\n                      Dissolve\r\n                  </li>\r\n                  <li hidden className=\"dissolve_content\"><Dissolve/></li>\r\n                  <li className=\"union\">\r\n                      Union\r\n                  </li>\r\n                  <li hidden className=\"union_content\"><Union/></li>\r\n                  <li className=\"intersect\">\r\n                      Intersect\r\n                  </li>\r\n                  <li hidden className=\"intersect_content\"><Intersect/></li>\r\n                  <li className=\"difference\">\r\n                      Difference\r\n                  </li>\r\n                  <li hidden className=\"difference_content\"><Difference/></li>\r\n                  <li className=\"extract\">\r\n                      Extract Feature\r\n                  </li>\r\n                  <li hidden className=\"extract_content\"></li>\r\n              </ul>\r\n          </div>\r\n          <div id='Layers'>\r\n              <Layers/>\r\n          </div>\r\n      </div>\r\n    ])\r\n  }\r\n}\r\n\r\nexport default Sidebar;\r\n","import React, { Component } from 'react';\nimport MainMap from \"./Map/MainMap\"\nimport Sidebar from \"./sidebar/Sidebar\"\nimport \"./App.css\"\n\nclass App extends Component {\n    render() {\n        return ([\n          <div id='page_content'>\n            <MainMap key='mainmap_key'/>\n            <div id='sidebar'>\n              <Sidebar key='sidebar_key'/>\n            </div>\n          </div>\n        ])\n      }\n}\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'leaflet/dist/leaflet.css';\nimport './index.css';\nimport App from './App';\nimport registerServiceWorker from './registerServiceWorker';\nimport $ from \"jquery\";\n\n\nReactDOM.render(<App />, document.getElementById('root'));\nregisterServiceWorker();\n\n\n\n$( '.buffer' ).click(function() {\n    $('.buffer_content').toggle();\n});\n\n$( '.dissolve' ).click(function() {\n    $('.dissolve_content').toggle();\n});\n\n$( '.intersection' ).click(function() {\n   console.log(\"Intersect\")\n});\n\n$( '.union' ).click(function() {\n  $('.union_content').toggle();\n});\n\n$( '.intersect' ).click(function() {\n  $('.intersect_content').toggle();\n});\n\n$( '.difference' ).click(function() {\n  $('.difference_content').toggle();\n});\n"],"sourceRoot":""}