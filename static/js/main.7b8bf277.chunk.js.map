{"version":3,"sources":["Map/MainMap.js","sidebar/tools/Union.js","sidebar/Layers.js","sidebar/tools/Buffer.js","sidebar/tools/Dissolve.js","sidebar/Sidebar.js","App.js","registerServiceWorker.js","index.js"],"names":["config","get_newgeojson","new_geojson","new_geojson_key","geojson","geojson_key","this","setState","params","center","zoomControl","zoom","scrollwheel","legends","infoControl","attributionControl","tileLayer","uri","attribution","id","accessToken","MainMap","props","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","map","geojsonLayer","_mapNode","onEachFeature","bind","assertThisInitialized","init","prevProps","prevState","addGeoJSONLayer","remove","key","L","geoJson","setStyle","className","addTo","target","feature","layer","properties","NAME","popupContent","concat","bindPopup","control","position","scale","_this2","lat","lng","react_default","a","createElement","ref","node","Component","getLayerListUnion","layer_list","Union","layer_data_list","data","i","length","push","name","listItems","d","value","onClick","param","executeUnion","union_select1","document","getElementById","geojson1","options","selectedIndex","union_select2","callUnion","createLayer","newest_file_name","newest_file_key","toConsumableArray","addLayerProperties","getElementsByClassName","addEventListener","current","replace","Sortable","create","onEnd","e","layers","g","getElementsByTagName","map_layer","console","log","$","appendTo","reorderLayers","list_order","class_name","split","getLayers","Layers","readGeoJSONFile","getLayerList","deleteLayer","type","onChange","accept","hidden","activateFileUpload","click","deleteLayerCall","attr","file_upload","file","files","Math","random","toString","substr","reader","FileReader","onload","JSON","parse","result","new_geojsonToParent","readAsText","alert","Buffer","require","placeholder","executeBuffer","callBuffer","Dissolve","executeDissolve","callDissolve","turf","buffer_radius","geojson_file_key","layer_position","find_called_geojson","selected_layer_geojson","collect_called_geojson","selected_layer_name","buffered","buffer","units","buffer_layer_key","generateKey","dissolved","dissolve","dissolve_layer_key","geojson_file_key1","geojson_file_key2","layer_position1","selected_layer_geojson1","selected_layer_name1","layer_position2","selected_layer_geojson2","selected_layer_name2","unionLayer","features","union_layer_key","geojson_file_position","geojson_file","LayerGroup","geometry","coordinates","Sidebar","sidebar_tools_Buffer","sidebar_tools_Dissolve","sidebar_tools_Union","src_sidebar_Layers","App","src_Map_MainMap","src_sidebar_Sidebar","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","catch","error","ReactDOM","render","src_App_0","URL","process","origin","fetch","response","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker","toggle"],"mappings":"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","file":"static/js/main.7b8bf277.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport L from 'leaflet';\r\nimport 'leaflet/dist/leaflet.css';\r\nimport 'leaflet-draw/dist/leaflet.draw.css';\r\nimport {Map, TileLayer, Popup, GeoJSON, FeatureGroup, Circle} from 'react-leaflet';\r\nimport './MainMap.css';\r\nimport $ from \"jquery\";\r\n// store the map configuration properties in an object,\r\n// we could also move this to a separate file & import it if desired.\r\nlet config = {};\r\nconfig.params = {\r\n  center: [63.43,10.4],\r\n  zoomControl: false,\r\n  zoom: 12,\r\n  scrollwheel: false,\r\n  legends: true,\r\n  infoControl: false,\r\n  attributionControl: true\r\n};\r\nconfig.tileLayer = {\r\n  uri: 'https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png',\r\n  params: {\r\n    attribution: '&copy; <a href=\"http://www.openstreetmap.org/copyright\">OpenStreetMap</a>',\r\n    id: '',\r\n    accessToken: ''\r\n  }\r\n};\r\n\r\n// Gets call from Sidebar to add geojson file to the map.\r\nexport function get_newgeojson(new_geojson, new_geojson_key) {\r\n  var geojson = new_geojson\r\n  var geojson_key = new_geojson_key\r\n  this.setState({ geojson, geojson_key })\r\n}\r\n\r\nclass MainMap extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      map: null,\r\n      tileLayer: null,\r\n      geojsonLayer: null,\r\n      geojson: null,\r\n      geojson_key: null,\r\n    };\r\n    this._mapNode = null;\r\n    this.onEachFeature = this.onEachFeature.bind(this);\r\n    get_newgeojson = get_newgeojson.bind(this)\r\n  }\r\n\r\n  // code to run just after the component \"mounts\" / DOM elements are created\r\n  componentDidMount() {\r\n    // creates the Leaflet map object\r\n    if (!this.state.map) this.init(this._mapNode);\r\n  }\r\n\r\n  // code to run when the component receives prop or state updates.\r\n  componentDidUpdate(prevProps, prevState) {\r\n    // Render map again if new geojson data is added.\r\n    if (this.state.geojson !== prevState.geojson){\r\n      this.addGeoJSONLayer(this.state.geojson, this.state.geojson_key);\r\n    }\r\n  }\r\n  // code to run just before unmounting the component\r\n  componentWillUnmount() {\r\n    // this destroys the Leaflet map object & related event listeners\r\n    this.state.map.remove();\r\n  }\r\n\r\n\r\n\r\n// Adds geojson layer to map, while giving it required features and class name\r\n  addGeoJSONLayer(geojson, key) {\r\n    const geojsonLayer = L.geoJson(geojson, {\r\n      onEachFeature: this.onEachFeature,\r\n    });\r\n\r\n    // add our GeoJSON layer to the Leaflet map object\r\n    if (this.state.geojson_key !== null) {\r\n      geojsonLayer.setStyle({'className': 'map-path '+this.state.geojson_key}); //will add key id to geojson layer.\r\n    } else {\r\n      geojsonLayer.setStyle({'className': 'map-path'}); //will add the required class\r\n    }\r\n    geojsonLayer.addTo(this.state.map);\r\n\r\n    // store the Leaflet GeoJSON layer in our component state.\r\n    this.setState({ geojsonLayer });\r\n   }\r\n\r\n  zoomToFeature(target) {\r\n    var fitBoundsParams = {\r\n      paddingTopLeft: [200,10],\r\n      paddingBottomRight: [10,10]\r\n    };\r\n  }\r\n\r\n  onEachFeature(feature, layer) {\r\n    if (feature.properties && feature.properties.NAME) {\r\n\r\n      // assemble the HTML for the markers' popups (Leaflet's bindPopup method doesn't accept React JSX)\r\n      const popupContent = `<h3>${feature.properties.NAME}</h3>`\r\n\r\n      // add our popups\r\n      layer.bindPopup(popupContent);\r\n\r\n    }\r\n\r\n\r\n}\r\n\r\n  // Initializs the map\r\n  init(id) {\r\n    if (this.state.map) return;\r\n    // this function creates the Leaflet map object and is called after the Map component mounts\r\n    let map = L.map(id, config.params);\r\n    L.control.zoom({ position: \"bottomleft\"}).addTo(map);\r\n    L.control.scale({ position: \"bottomleft\"}).addTo(map);\r\n\r\n    // a TileLayer is used as the \"basemap\"\r\n    const tileLayer = L.tileLayer(config.tileLayer.uri, config.tileLayer.params).addTo(map);\r\n\r\n    // set our state to include the tile layer\r\n    this.setState({ map, tileLayer });\r\n  }\r\n\r\n  render() {\r\n    //Set the map position and zoom level\r\n    const position = [this.state.lat, this.state.lng]\r\n\r\n    return (\r\n      <div id=\"mapUI\">\r\n         <div ref={(node) => this._mapNode = node} id=\"map\" />\r\n     </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport function reorderLayers(layers) {\r\n  var i;\r\n  var g = document.getElementsByTagName(\"g\");\r\n  for (i=layers.length; i > -1; i--){\r\n    var map_layer = document.getElementsByClassName(layers[i]+\" leaflet-interactive\")[0]\r\n    console.log(map_layer)\r\n    $(map_layer).appendTo(g);\r\n  }\r\n}\r\n\r\n\r\n\r\nexport default MainMap;\r\n","import React, { Component } from 'react';\r\nimport \"./Union.css\"\r\nimport { callUnion } from '../Sidebar.js'\r\nimport $ from \"jquery\";\r\n\r\n\r\n// Fetches layer_list from layers, in order to get selection data.\r\nexport function getLayerListUnion(layer_list) {\r\n  this.setState({ layer_list })\r\n}\r\n\r\nclass Union extends Component{\r\n  constructor(props){\r\n    super(props)\r\n    this.state = {\r\n      layer_list: []\r\n    }\r\n    getLayerListUnion = getLayerListUnion.bind(this);\r\n  }\r\n\r\n  render(){\r\n    // Parses through all layers stored in memory and add them to the select lists.\r\n    const layer_data_list = this.state.layer_list\r\n    var data = []\r\n    for (var i = 0; i < layer_data_list.length; i++) {\r\n      data.push({\"name\":layer_data_list[i][0],\"key\":layer_data_list[i][1]})\r\n    }\r\n    const listItems = data.map((d) => <option value={d.key}>{d.name}</option>)\r\n\r\n    return(\r\n      <div>\r\n        <p>Select the 2 layers you want to unite.</p>\r\n        <select id=\"union_select_geojson1\">\r\n          {listItems}\r\n        </select>\r\n        <select id=\"union_select_geojson2\">\r\n          {listItems}\r\n        </select>\r\n        <button onClick={(param) => this.executeUnion(param)}>Apply</button>\r\n      </div>\r\n    )\r\n}\r\n\r\n    // Sends call to Sidebar to run Union code.\r\n    executeUnion(){\r\n      // Collects chosen layers from select list.\r\n      var union_select1 = document.getElementById(\"union_select_geojson1\");\r\n      var geojson1 = union_select1.options[union_select1.selectedIndex].value;\r\n      var union_select2 = document.getElementById(\"union_select_geojson2\");\r\n      var geojson2 = union_select2.options[union_select2.selectedIndex].value;\r\n      callUnion(geojson1, geojson2)\r\n    }\r\n\r\n\r\n}\r\n\r\nexport default Union;\r\n","import React, { Component } from 'react';\r\nimport Sortable from 'sortablejs';\r\nimport './Layers.css';\r\nimport { new_geojsonToParent, getLayerList, deleteLayerCall } from './Sidebar.js'\r\nimport { reorderLayers } from '../Map/MainMap'\r\nimport { getLayerListUnion } from './tools/Union.js'\r\nimport $ from \"jquery\";\r\n\r\n\r\n// Class that handles layer logic and uploading of files.\r\nclass Layers extends Component{\r\n  constructor(props){\r\n    super(props)\r\n    this.state = {\r\n      layer_list: []\r\n    }\r\n    this.readGeoJSONFile = this.readGeoJSONFile.bind(this);\r\n    createLayer = createLayer.bind(this);\r\n  }\r\n\r\n  componentDidUpdate(prevProps, prevState) {\r\n    // Appending new file name to Layer list with a unique key value.\r\n    if (this.state.layer_list !== prevState.layer_list ){\r\n      getLayerList(this.state.layer_list)\r\n      getLayerListUnion(this.state.layer_list)\r\n    }\r\n\r\n    // Make all the new layers selectable and dragable.\r\n    addLayerProperties()\r\n  }\r\n\r\n  componentDidMount() {\r\n    // Make the initial layers selectable and dragable.\r\n    addLayerProperties()\r\n  }\r\n\r\n  render(){\r\n    // Parses through all layers stored in memory and add them to the Layer list.\r\n    const layer_data_list = this.state.layer_list\r\n    var data = []\r\n    for (var i = 0; i < layer_data_list.length; i++) {\r\n      data.push({\"name\":layer_data_list[i][0],\"key\":layer_data_list[i][1]})\r\n    }\r\n    const listItems = data.map((d) => <li className=\"layer\" id={d.key}>{d.name}</li>)\r\n\r\n    return(\r\n      <div id=\"layers\">\r\n          <p id=\"subtitle\">Layers</p>\r\n          <button id=\"delete\" onClick={(param) => this.deleteLayer(param)}>[TRASH]</button>\r\n          <p id='sub_info'>Click to select, drag to reorder.</p>\r\n          <div>\r\n              <ul id=\"sortable_layers\" className=\"ui-sortable\">\r\n                  {listItems}\r\n              </ul>\r\n          </div>\r\n          <div>\r\n            <p id=\"subtitle\">Add Layer</p>\r\n            <div>\r\n              {/* Hidden input field to handle file upload on button click. */}\r\n              <input id='fileid' type='file' onChange={(param) => this.readGeoJSONFile(param)} accept=\".GeoJSON,.JSON\" hidden/>\r\n              <button id=\"upload\" onClick={(param) => this.activateFileUpload(param)}>Upload file</button>\r\n            </div>\r\n            <p id='sub_info'>Click button and upload GeoJSON or JSON file.</p>\r\n\r\n          </div>\r\n      </div>\r\n    )\r\n  }\r\n\r\n  // Checks if upload GeoJSON button has been clicked, and file has been selected.\r\n  activateFileUpload(){\r\n    document.getElementById('fileid').click();\r\n    document.getElementById('fileid').addEventListener('change', this.readGeoJSONFile, true);\r\n  }\r\n\r\n// Sends call to Sidebar to delete selected layer, when delete button is clicked.\r\n  deleteLayer(){\r\n    var delete_layer_key= ($('li.active').attr('id'));\r\n    deleteLayerCall(delete_layer_key)\r\n  }\r\n\r\n /*\r\n        TODO: ADD EXCEPTION HANDELING FOR FILE UPLOAD.\r\n */\r\n\r\n  // Adding file reading code in Layers as this is the only place it is used.\r\n  readGeoJSONFile(file_upload){\r\n    //Retrieving the first (and only!) File from the FileList object\r\n    var file = file_upload.target.files[0];\r\n    const newest_file_key = Math.random().toString(36).substr(2, 9);\r\n    //NOTE: Math.random should be unique (with less than 10.000 simulatanious layers) because of its seeding algorithm.\r\n    const newest_file_name = file.name;\r\n\r\n    if (file) {\r\n      var reader = new FileReader();\r\n      reader.onload = function(e) {\r\n        const new_geojson = JSON.parse(e.target.result)\r\n\r\n        // Sending the JSON extracted from file to Parent component.\r\n        new_geojsonToParent(new_geojson, newest_file_key)\r\n        createLayer(newest_file_name, newest_file_key, new_geojson)\r\n\r\n\r\n      }\r\n      reader.readAsText(file);\r\n    } else {\r\n      alert(\"Failed to load file\");\r\n    }\r\n\r\n\r\n  }\r\n}\r\n\r\n// helper function that collect read data and sets new state.\r\nexport function createLayer(newest_file_name, newest_file_key, new_geojson){\r\n  this.setState({\r\n    layer_list: [...this.state.layer_list, [newest_file_name, newest_file_key, new_geojson]]\r\n  })\r\n}\r\n\r\nfunction addLayerProperties() {\r\n  // Gets the class name for the layer list.\r\n  var layer_list = document.getElementById(\"sortable_layers\");\r\n\r\n  // Makes the sidebar layer list selectable.\r\n  var layer = layer_list.getElementsByClassName(\"layer\");\r\n  for (var i = 0; i < layer.length; i++) {\r\n      layer[i].addEventListener(\"click\", function() {\r\n          var current = document.getElementsByClassName(\"active\");\r\n          if (current[0]){\r\n          current[0].className = current[0].className.replace(\" active\", \"\");\r\n          }\r\n          this.className += \" active\";\r\n      });\r\n  }\r\n\r\n  // Makes the sidebar layer list sortable\r\n  Sortable.create(layer_list,{\r\n      onEnd: function (e){\r\n          // Reorders the layers based on ID name ordering.\r\n          reorderLayers(getLayers())\r\n      }\r\n  })\r\n\r\n  // Function that returns all layers (and their order.)\r\n  function getLayers(){\r\n      var i;\r\n      var list_order = [];\r\n      var a = document.getElementsByClassName(\"layer\")\r\n      for (i=0; i < a.length; i++){\r\n          var class_name = ((a[i].className).split(\" \"))\r\n          list_order.push(class_name[0])\r\n      }\r\n      return list_order;\r\n  }\r\n}\r\n\r\nexport default Layers;\r\n","import React, { Component } from 'react';\r\nimport \"./Buffer.css\"\r\nimport MainMap from '../../Map/MainMap'\r\nimport L from 'leaflet'\r\nimport { callBuffer } from '../Sidebar.js'\r\nimport geojson from '../../geojson/sor_trondelag.json';\r\nimport $ from \"jquery\";\r\nvar buffer = require('@turf/buffer')\r\nvar turf = require('@turf/turf')\r\n\r\n\r\nclass Buffer extends Component{\r\n  constructor(props) {\r\n    super(props)\r\n  }\r\n    render(){\r\n        return(\r\n        <div>\r\n           <div id=\"tool_title\">Distance:</div>\r\n           <input id=\"buffer_number\" type=\"number\" placeholder=\"Buffer in meters\"></input>\r\n           <br></br>\r\n           <button onClick={(param) => this.executeBuffer(param)}>Apply</button>\r\n        </div>\r\n        )\r\n    }\r\n\r\n    // Sends call to Sidebar to run Buffer code.\r\n    executeBuffer(){\r\n      var buffer_radius = document.getElementById('buffer_number').value;\r\n      var layer_key= ($('li.active').attr('id'));\r\n      callBuffer(buffer_radius, layer_key)\r\n    }\r\n}\r\n\r\n\r\n\r\nexport default Buffer;\r\n","import React, { Component } from 'react';\r\nimport \"./Dissolve.css\"\r\nimport { callDissolve } from '../Sidebar.js'\r\nimport $ from \"jquery\";\r\n\r\n\r\nclass Dissolve extends Component{\r\n    render(){\r\n        return(\r\n        <div>\r\n           <button onClick={(param) => this.executeDissolve(param)}>Apply</button>\r\n        </div>\r\n        )\r\n    }\r\n\r\n    // Sends call to Sidebar to run Buffer code.\r\n    executeDissolve(){\r\n      var layer_key= ($('li.active').attr('id'));\r\n      callDissolve(layer_key)\r\n    }\r\n}\r\n\r\nexport default Dissolve;\r\n","import React, { Component } from 'react';\r\nimport Layers from \"./Layers\";\r\nimport \"./Sidebar.css\";\r\nimport Buffer from './tools/Buffer';\r\nimport Dissolve from './tools/Dissolve';\r\nimport Union from './tools/Union';\r\nimport { get_newgeojson } from '../Map/MainMap'\r\nimport { createLayer } from './Layers'\r\nimport $ from \"jquery\";\r\nimport L from 'leaflet';\r\nvar buffer = require('@turf/buffer')\r\nvar turf = require('@turf/turf')\r\nvar fs = require('fs');\r\n\r\n// Gets call from Buffer and sends data to MainMap and Layer\r\nexport function callBuffer(buffer_radius, geojson_file_key) {\r\n  var layer_position = find_called_geojson(geojson_file_key)\r\n  var selected_layer_geojson = collect_called_geojson(layer_position)\r\n  var selected_layer_name = this.state.layer_list[layer_position][0]\r\n  var buffered = turf.buffer(selected_layer_geojson, buffer_radius, {units: 'meters'});\r\n  const buffer_layer_key = generateKey()\r\n  get_newgeojson(buffered, buffer_layer_key)\r\n  createLayer(selected_layer_name+' '+buffer_radius+' m buffer', buffer_layer_key, buffered)\r\n}\r\n\r\n// Gets call from Dissolve and sends data to MainMap and Layer\r\nexport function callDissolve(geojson_file_key) {\r\n  var layer_position = find_called_geojson(geojson_file_key)\r\n  var selected_layer_geojson = collect_called_geojson(layer_position)\r\n  var selected_layer_name = this.state.layer_list[layer_position][0]\r\n  var dissolved = turf.dissolve(selected_layer_geojson)\r\n  const dissolve_layer_key = generateKey()\r\n  get_newgeojson(dissolved, dissolve_layer_key)\r\n  createLayer(selected_layer_name+' dissolved', dissolve_layer_key, dissolved)\r\n}\r\n\r\n// Gets call from Union and sends data to MainMap and Layer\r\n\r\nexport function callUnion(geojson_file_key1, geojson_file_key2) {\r\n  /*NOTE:  As the union function uses polygons not geojson files as input,\r\n  we need to seperate the geojson files into features and merge all of them. */\r\n\r\n  // gets the data for the first geojson file stored in memory.\r\n  var layer_position1 = find_called_geojson(geojson_file_key1)\r\n  var selected_layer_geojson1 = collect_called_geojson(layer_position1)\r\n  var selected_layer_name1 = this.state.layer_list[layer_position1][0]\r\n  // gets the data for the second geojson file stored in memory.\r\n  var layer_position2 = find_called_geojson(geojson_file_key2)\r\n  var selected_layer_geojson2 = collect_called_geojson(layer_position2)\r\n  var selected_layer_name2 = this.state.layer_list[layer_position2][0]\r\n\r\n  // combines the geojson files into one, in case we have mulitple features in one of them.\r\n  var unionLayer = {\r\n    \"type\" : \"FeatureCollection\",\r\n    \"features\": [... selected_layer_geojson1.features, ... selected_layer_geojson2.features]\r\n  }\r\n\r\n  const union_layer_key = generateKey()\r\n  get_newgeojson(unionLayer, union_layer_key)\r\n  createLayer('union '+selected_layer_name1+' & '+selected_layer_name2, union_layer_key, unionLayer)\r\n\r\n}\r\n\r\nexport function deleteLayerCall(geojson_file_key) {\r\n  var layer_position = find_called_geojson(geojson_file_key)\r\n  var selected_layer_geojson = this.state.layer_list[layer_position][2]\r\n  // Removes the layer for the selected geojson file in sidebar.\r\n  $( \"#\"+geojson_file_key+\"\" ).remove();\r\n  // Removes the geojson layers from the map.\r\n  $( \".\"+geojson_file_key+\"\" ).remove();\r\n\r\n  // TODO: Remove layer from UNION\r\n}\r\n\r\n// Finds position in layer list for geojson based on key value.\r\nfunction find_called_geojson(geojson_file_key){\r\n  for (var i = 0; i < this.state.layer_list.length; i++) {\r\n    if (geojson_file_key == this.state.layer_list[i][1]){\r\n      return i\r\n    }\r\n  }\r\n}\r\n\r\n// Returns the geojson file, in a format suited for the operations.\r\nexport function collect_called_geojson(geojson_file_position){\r\n  var geojson_file = this.state.layer_list[geojson_file_position][2]\r\n  // If file is a FeatureCollection, we can simply return it.\r\n  if (geojson_file.type == \"FeatureCollection\"){\r\n    return geojson_file\r\n  }\r\n  // If file is only a Polygon, we need to convert it into a FeatureCollection.\r\n  else if (geojson_file.type == \"Polygon\") {\r\n    var lg = new L.LayerGroup();\r\n    var geojson = {\"type\":\"FeatureCollection\",\"features\":[{\"type\": \"Feature\", \"properties\": {},  \"geometry\": { \"type\": \"Polygon\", \"coordinates\": geojson_file.coordinates }}]};\r\n    return geojson\r\n  }\r\n\r\n}\r\n\r\n// Generate new layer layer key\r\nfunction generateKey() {\r\n  return Math.random().toString(36).substr(2, 9);\r\n}\r\n\r\n// Fetches GeoJSON properties from Layer and passes them on to MainMap.\r\nexport function new_geojsonToParent(new_geojson, newest_file_key) {\r\n  get_newgeojson(new_geojson, newest_file_key)\r\n}\r\n\r\n// Fetches layer_list from layers, in order to send geojson data to MainMap.\r\nexport function getLayerList(layer_list) {\r\n  this.setState({ layer_list })\r\n}\r\n\r\nclass Sidebar extends Component {\r\n  constructor(props){\r\n    super(props)\r\n    this.state = {\r\n      layer_list: []\r\n    }\r\n    callBuffer = callBuffer.bind(this)\r\n    callDissolve = callDissolve.bind(this)\r\n    callUnion = callUnion.bind(this)\r\n    new_geojsonToParent = new_geojsonToParent.bind(this)\r\n    getLayerList = getLayerList.bind(this)\r\n    find_called_geojson = find_called_geojson.bind(this)\r\n    deleteLayerCall = deleteLayerCall.bind(this)\r\n    collect_called_geojson = collect_called_geojson.bind(this)\r\n\r\n  }\r\n\r\n  render() {\r\n    return ([\r\n      <div id=\"sidebar_content\">\r\n          <div id=\"sidebar_title_div\">\r\n              <h1 id=\"title\">App name</h1>\r\n          </div>\r\n          <div id=\"tools\">\r\n              <p id=\"subtitle\">Tools</p>\r\n              <ul id=\"tool_layer\">\r\n                  <li className=\"buffer\">\r\n                      Buffer {this.state.buffer_radius}\r\n                  </li>\r\n                  <li hidden className=\"buffer_content\"><Buffer/></li>\r\n                  <li className=\"dissolve\">\r\n                      Dissolve\r\n                  </li>\r\n                  <li hidden className=\"dissolve_content\"><Dissolve/></li>\r\n                  <li className=\"union\">\r\n                      Union\r\n                  </li>\r\n                  <li hidden className=\"union_content\"><Union/></li>\r\n                  <li className=\"intersection\">\r\n                      Intersection\r\n                  </li>\r\n                  <li hidden className=\"intersection_content\"></li>\r\n                  <li className=\"diffrence\">\r\n                      Diffrence\r\n                  </li>\r\n                  <li hidden className=\"diffrence_content\"></li>\r\n                  <li className=\"extract\">\r\n                      Extract Feature\r\n                  </li>\r\n                  <li hidden className=\"extract_content\"></li>\r\n              </ul>\r\n          </div>\r\n          <div id='Layers'>\r\n              <Layers/>\r\n          </div>\r\n      </div>\r\n    ])\r\n  }\r\n}\r\n\r\nexport default Sidebar;\r\n","import React, { Component } from 'react';\nimport MainMap from \"./Map/MainMap\"\nimport Sidebar from \"./sidebar/Sidebar\"\nimport \"./App.css\"\n\nclass App extends Component {\n    render() {\n        return ([\n          <div id='page_content'>\n            <MainMap key='mainmap_key'/>\n            <div id='sidebar'>\n              <Sidebar key='sidebar_key'/>\n            </div>\n          </div>\n        ])\n      }\n}\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'leaflet/dist/leaflet.css';\nimport './index.css';\nimport App from './App';\nimport registerServiceWorker from './registerServiceWorker';\nimport $ from \"jquery\";\n\n\nReactDOM.render(<App />, document.getElementById('root'));\nregisterServiceWorker();\n\n\n\n$( '.buffer' ).click(function() {\n    $('.buffer_content').toggle();\n});\n\n$( '.dissolve' ).click(function() {\n    $('.dissolve_content').toggle();\n});\n\n$( '.intersection' ).click(function() {\n   console.log(\"Intersect\")\n});\n\n$( '.union' ).click(function() {\n  $('.union_content').toggle();\n});\n"],"sourceRoot":""}