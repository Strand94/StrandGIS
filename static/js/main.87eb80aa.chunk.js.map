{"version":3,"sources":["Map/MainMap.js","sidebar/Layers.js","sidebar/tools/Buffer.js","sidebar/tools/Dissolve.js","sidebar/Sidebar.js","App.js","registerServiceWorker.js","index.js"],"names":["config","get_newgeojson","new_geojson","new_geojson_key","geojson","geojson_key","this","setState","params","center","zoomControl","zoom","scrollwheel","legends","infoControl","attributionControl","tileLayer","uri","attribution","id","accessToken","MainMap","props","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","map","geojsonLayer","_mapNode","onEachFeature","bind","assertThisInitialized","getData","init","prevProps","prevState","console","log","addGeoJSONLayer","remove","key","L","geoJson","setStyle","className","addTo","target","feature","layer","properties","NAME","popupContent","concat","bindPopup","control","position","scale","_this2","lat","lng","react_default","a","createElement","ref","node","Component","createLayer","newest_file_name","newest_file_key","layer_list","toConsumableArray","addLayerProperties","document","getElementById","getElementsByClassName","i","length","addEventListener","current","replace","Sortable","create","onEnd","e","layers","g","getElementsByTagName","map_layer","$","appendTo","reorderLayers","list_order","class_name","split","push","getLayers","Layers","readGeoJSONFile","getLayerList","layer_data_list","data","name","listItems","d","type","onChange","param","accept","hidden","onClick","activateFileUpload","click","file_upload","file","files","Math","random","toString","substr","reader","FileReader","onload","JSON","parse","result","new_geojsonToParent","readAsText","alert","Buffer","require","placeholder","executeBuffer","callBuffer","value","attr","Dissolve","turf","buffer_radius","geojson_file_key","layer_position","find_called_geojson","selected_layer_geojson","selected_layer_name","buffered","buffer","units","buffer_layer_key","Sidebar","sidebar_tools_Buffer","sidebar_tools_Dissolve","src_sidebar_Layers","App","src_Map_MainMap","src_sidebar_Sidebar","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","catch","error","ReactDOM","render","src_App_0","URL","process","origin","fetch","response","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker","toggle"],"mappings":"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","file":"static/js/main.87eb80aa.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport L from 'leaflet';\r\nimport 'leaflet/dist/leaflet.css';\r\nimport 'leaflet-draw/dist/leaflet.draw.css';\r\nimport {Map, TileLayer, Popup, GeoJSON, FeatureGroup, Circle} from 'react-leaflet';\r\nimport './MainMap.css';\r\nimport $ from \"jquery\";\r\nimport geojson from '../geojson/nord_trondelag.json';\r\n// store the map configuration properties in an object,\r\n// we could also move this to a separate file & import it if desired.\r\nlet config = {};\r\nconfig.params = {\r\n  center: [63.43,10.4],\r\n  zoomControl: false,\r\n  zoom: 12,\r\n  scrollwheel: false,\r\n  legends: true,\r\n  infoControl: false,\r\n  attributionControl: true\r\n};\r\nconfig.tileLayer = {\r\n  uri: 'https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png',\r\n  params: {\r\n    attribution: '&copy; <a href=\"http://www.openstreetmap.org/copyright\">OpenStreetMap</a>',\r\n    id: '',\r\n    accessToken: ''\r\n  }\r\n};\r\n\r\nexport function get_newgeojson(new_geojson, new_geojson_key) {\r\n  var geojson = new_geojson\r\n  var geojson_key = new_geojson_key\r\n  this.setState({ geojson, geojson_key })\r\n}\r\n\r\n\r\nclass MainMap extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      map: null,\r\n      tileLayer: null,\r\n      geojsonLayer: null,\r\n      geojson: null,\r\n      geojson_key: null,\r\n    };\r\n    this._mapNode = null;\r\n    this.onEachFeature = this.onEachFeature.bind(this);\r\n    get_newgeojson = get_newgeojson.bind(this)\r\n  }\r\n\r\n  // code to run just after the component \"mounts\" / DOM elements are created\r\n  componentDidMount() {\r\n    // fetches the initial geojson data.\r\n    this.getData();\r\n     // creates the Leaflet map object\r\n    if (!this.state.map) this.init(this._mapNode);\r\n  }\r\n\r\n  // code to run when the component receives new props or state.\r\n  componentDidUpdate(prevProps, prevState) {\r\n    console.log(\"Component Update\")\r\n    // Render map again if new geojson data is added.\r\n    if (this.state.geojson !== prevState.geojson){\r\n      this.addGeoJSONLayer(this.state.geojson, this.state.geojson_key);\r\n    }\r\n\r\n  }\r\n  // code to run just before unmounting the component\r\n  componentWillUnmount() {\r\n    // this destroys the Leaflet map object & related event listeners\r\n    this.state.map.remove();\r\n  }\r\n\r\n// Loads the initial geojson data. (TODO: May be removed in future)\r\n  getData() {\r\n    this.setState({\r\n      geojson\r\n    });\r\n  }\r\n\r\n// Adds geojson layer to map, while giving it required features and class name\r\n  addGeoJSONLayer(geojson, key) {\r\n    console.log(\"Add geojon layer\")\r\n    const geojsonLayer = L.geoJson(geojson, {\r\n      onEachFeature: this.onEachFeature,\r\n    });\r\n\r\n    // add our GeoJSON layer to the Leaflet map object\r\n    if (this.state.geojson_key !== null) {\r\n      geojsonLayer.setStyle({'className': 'map-path '+this.state.geojson_key}); //will add key id to geojson layer.\r\n    } else {\r\n      geojsonLayer.setStyle({'className': 'map-path'}); //will add the required class\r\n    }\r\n    geojsonLayer.addTo(this.state.map);\r\n\r\n    // store the Leaflet GeoJSON layer in our component state.\r\n    this.setState({ geojsonLayer });\r\n   }\r\n\r\n  zoomToFeature(target) {\r\n    var fitBoundsParams = {\r\n      paddingTopLeft: [200,10],\r\n      paddingBottomRight: [10,10]\r\n    };\r\n  }\r\n\r\n  onEachFeature(feature, layer) {\r\n    if (feature.properties && feature.properties.NAME) {\r\n\r\n      // assemble the HTML for the markers' popups (Leaflet's bindPopup method doesn't accept React JSX)\r\n      const popupContent = `<h3>${feature.properties.NAME}</h3>`\r\n\r\n      // add our popups\r\n      layer.bindPopup(popupContent);\r\n\r\n    }\r\n\r\n\r\n}\r\n\r\n  // Initializs the map\r\n  init(id) {\r\n    if (this.state.map) return;\r\n    // this function creates the Leaflet map object and is called after the Map component mounts\r\n    let map = L.map(id, config.params);\r\n    L.control.zoom({ position: \"bottomleft\"}).addTo(map);\r\n    L.control.scale({ position: \"bottomleft\"}).addTo(map);\r\n\r\n    // a TileLayer is used as the \"basemap\"\r\n    const tileLayer = L.tileLayer(config.tileLayer.uri, config.tileLayer.params).addTo(map);\r\n\r\n    // set our state to include the tile layer\r\n    this.setState({ map, tileLayer });\r\n  }\r\n\r\n  render() {\r\n    //Set the map position and zoom level\r\n    const position = [this.state.lat, this.state.lng]\r\n\r\n    return (\r\n      <div id=\"mapUI\">\r\n         <div ref={(node) => this._mapNode = node} id=\"map\" />\r\n     </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport function reorderLayers(layers) {\r\n  var i;\r\n  var g = document.getElementsByTagName(\"g\");\r\n  for (i=layers.length; i > -1; i--){\r\n    var map_layer = document.getElementsByClassName(layers[i]+\" leaflet-interactive\")[0]\r\n    console.log(map_layer)\r\n    $(map_layer).appendTo(g);\r\n  }\r\n}\r\n\r\n\r\n\r\nexport default MainMap;\r\n","import React, { Component } from 'react';\r\nimport Sortable from 'sortablejs';\r\nimport './Layers.css';\r\nimport { new_geojsonToParent, getLayerList } from './Sidebar.js'\r\nimport { reorderLayers } from '../Map/MainMap'\r\n\r\n// Class that handles layer logic and uploading of files.\r\nclass Layers extends Component{\r\n  constructor(props){\r\n    super(props)\r\n    this.state = {\r\n      layer_list: []\r\n    }\r\n    this.readGeoJSONFile = this.readGeoJSONFile.bind(this);\r\n    createLayer = createLayer.bind(this);\r\n  }\r\n\r\n  componentDidUpdate(prevProps, prevState) {\r\n    // Appending new file name to Layer list with a unique key value.\r\n    if (this.state.layer_list !== prevState.layer_list ){\r\n      getLayerList(this.state.layer_list)\r\n    }\r\n\r\n    // Make all the new layers selectable and dragable.\r\n    addLayerProperties()\r\n  }\r\n\r\n  componentDidMount() {\r\n    // Make the initial layers selectable and dragable.\r\n    addLayerProperties()\r\n  }\r\n\r\n  render(){\r\n    // Parses through all layers stored in memory and add them to the Layer list.\r\n    const layer_data_list = this.state.layer_list\r\n    var data = []\r\n    for (var i = 0; i < layer_data_list.length; i++) {\r\n      data.push({\"name\":layer_data_list[i][0],\"key\":layer_data_list[i][1]})\r\n    }\r\n    const listItems = data.map((d) => <li className=\"layer\" id={d.key}>{d.name}</li>)\r\n\r\n    return(\r\n      <div id=\"layers\">\r\n          <p id=\"subtitle\">Layers</p>\r\n          <p id='sub_info'>Click to select, drag to reorder.</p>\r\n          <div>\r\n              <ul id=\"sortable_layers\" className=\"ui-sortable\">\r\n                  <li className=\"T1 layer active\">Trondheim</li>\r\n                  <li className=\"T2 layer\">Trondheim 2</li>\r\n                  {listItems}\r\n              </ul>\r\n          </div>\r\n          <div>\r\n            <p id=\"subtitle\">Add Layer</p>\r\n            <div>\r\n              {/* Hidden input field to handle file upload on button click. */}\r\n              <input id='fileid' type='file' onChange={(param) => this.readGeoJSONFile(param)} accept=\".GeoJSON,.JSON\" hidden/>\r\n              <button id=\"upload\" onClick={(param) => this.activateFileUpload(param)}>Upload file</button>\r\n            </div>\r\n            <p id='sub_info'>Click button and upload GeoJSON or JSON file.</p>\r\n\r\n          </div>\r\n      </div>\r\n    )\r\n  }\r\n\r\n  // Checks if upload GeoJSON button has been clicked, and file has been selected.\r\n  activateFileUpload(){\r\n    document.getElementById('fileid').click();\r\n    document.getElementById('fileid').addEventListener('change', this.readGeoJSONFile, true);\r\n  }\r\n\r\n /*\r\n        TODO: ADD EXCEPTION HANDELING FOR FILE UPLOAD.\r\n */\r\n\r\n  // Adding file reading code in Layers as this is the only place it is used.\r\n  readGeoJSONFile(file_upload){\r\n    //Retrieving the first (and only!) File from the FileList object\r\n    var file = file_upload.target.files[0];\r\n    const newest_file_key = Math.random().toString(36).substr(2, 9);\r\n    //NOTE: Math.random should be unique (with less than 10.000 simulatanious layers) because of its seeding algorithm.\r\n    const newest_file_name = file.name;\r\n\r\n    if (file) {\r\n      var reader = new FileReader();\r\n      reader.onload = function(e) {\r\n        const new_geojson = JSON.parse(e.target.result)\r\n\r\n        // Sending the JSON extracted from file to Parent component.\r\n        new_geojsonToParent(new_geojson, newest_file_key)\r\n        createLayer(newest_file_name, newest_file_key, new_geojson)\r\n\r\n\r\n      }\r\n      reader.readAsText(file);\r\n    } else {\r\n      alert(\"Failed to load file\");\r\n    }\r\n\r\n\r\n  }\r\n}\r\n\r\n// helper function that collect read data and sets new state.\r\nexport function createLayer(newest_file_name, newest_file_key, new_geojson){\r\n  this.setState({\r\n    layer_list: [...this.state.layer_list, [newest_file_name, newest_file_key, new_geojson]]\r\n  })\r\n}\r\n\r\nfunction addLayerProperties() {\r\n  // Gets the class name for the layer list.\r\n  var layer_list = document.getElementById(\"sortable_layers\");\r\n\r\n  // Makes the sidebar layer list selectable.\r\n  var layer = layer_list.getElementsByClassName(\"layer\");\r\n  for (var i = 0; i < layer.length; i++) {\r\n      layer[i].addEventListener(\"click\", function() {\r\n          var current = document.getElementsByClassName(\"active\");\r\n          current[0].className = current[0].className.replace(\" active\", \"\");\r\n          this.className += \" active\";\r\n      });\r\n  }\r\n\r\n  // Makes the sidebar layer list sortable\r\n  Sortable.create(layer_list,{\r\n      onEnd: function (e){\r\n          // Reorders the layers based on ID name ordering.\r\n          reorderLayers(getLayers())\r\n      }\r\n  })\r\n\r\n  // Function that returns all layers (and their order.)\r\n  function getLayers(){\r\n      var i;\r\n      var list_order = [];\r\n      var a = document.getElementsByClassName(\"layer\")\r\n      for (i=0; i < a.length; i++){\r\n          var class_name = ((a[i].className).split(\" \"))\r\n          list_order.push(class_name[0])\r\n      }\r\n      return list_order;\r\n  }\r\n}\r\n\r\nexport default Layers;\r\n","import React, { Component } from 'react';\r\nimport \"./Buffer.css\"\r\nimport MainMap from '../../Map/MainMap'\r\nimport L from 'leaflet'\r\nimport { callBuffer } from '../Sidebar.js'\r\nimport geojson from '../../geojson/sor_trondelag.json';\r\nimport $ from \"jquery\";\r\nvar buffer = require('@turf/buffer')\r\nvar turf = require('@turf/turf')\r\n\r\n\r\nclass Buffer extends Component{\r\n  constructor(props) {\r\n    super(props)\r\n  }\r\n    render(){\r\n        return(\r\n        <div>\r\n           <div id=\"tool_title\">Distance:</div>\r\n           <input id=\"buffer_number\" type=\"number\" placeholder=\"Buffer in meters\"></input>\r\n           <br></br>\r\n           <button onClick={(param) => this.executeBuffer(param)}>Apply</button>\r\n        </div>\r\n        )\r\n    }\r\n\r\n    // Sends call to Sidebar to run Buffer code.\r\n    executeBuffer(){\r\n      var buffer_radius = document.getElementById('buffer_number').value;\r\n      var layer_key= ($('li.active').attr('id'));\r\n      callBuffer(buffer_radius, layer_key)\r\n    }\r\n}\r\n\r\n\r\n\r\nexport default Buffer;\r\n","import React, { Component } from 'react';\r\nimport \"./Dissolve.css\"\r\n\r\nclass Dissolve extends Component{\r\n    render(){\r\n        return(\r\n        <div>\r\n           <button id=\"apply_dissolve\">Apply</button>\r\n        </div>\r\n        )       \r\n    }\r\n}\r\n\r\nexport default Dissolve;","import React, { Component } from 'react';\r\nimport Layers from \"./Layers\";\r\nimport \"./Sidebar.css\";\r\nimport Buffer from './tools/Buffer';\r\nimport Dissolve from './tools/Dissolve';\r\nimport { get_newgeojson } from '../Map/MainMap'\r\nimport { createLayer } from './Layers'\r\nvar buffer = require('@turf/buffer')\r\nvar turf = require('@turf/turf')\r\n\r\n// Gets call from Buffer and sends data to MainMap and Layer\r\nexport function callBuffer(buffer_radius, geojson_file_key) {\r\n  console.log(\"Buffer Call\")\r\n  console.log(buffer_radius)\r\n  var layer_position = find_called_geojson(geojson_file_key)\r\n  var selected_layer_geojson = this.state.layer_list[layer_position][2]\r\n  var selected_layer_name = this.state.layer_list[layer_position][0]\r\n  var buffered = turf.buffer(selected_layer_geojson, buffer_radius, {units: 'meters'});\r\n  const buffer_layer_key = generateKey()\r\n  get_newgeojson(buffered, buffer_layer_key)\r\n  createLayer(selected_layer_name+' '+buffer_radius+' m buffer', buffer_layer_key, buffered)\r\n}\r\n\r\n// Finds position in layer list for geojson based on key value.\r\nfunction find_called_geojson(geojson_file_key){\r\n  for (var i = 0; i < this.state.layer_list.length; i++) {\r\n    if (geojson_file_key == this.state.layer_list[i][1]){\r\n      return i\r\n    }\r\n  }\r\n}\r\n\r\n// Generate new layer layer key\r\nfunction generateKey() {\r\n  return Math.random().toString(36).substr(2, 9);\r\n}\r\n\r\n// Fetches GeoJSON properties from Layer and passes them on to MainMap.\r\nexport function new_geojsonToParent(new_geojson, newest_file_key) {\r\n  get_newgeojson(new_geojson, newest_file_key)\r\n}\r\n\r\n// Fetches layer_list from layers, in order to send geojson data to MainMap.\r\nexport function getLayerList(layer_list) {\r\n  this.setState({ layer_list })\r\n}\r\n\r\nclass Sidebar extends Component {\r\n  constructor(props){\r\n    super(props)\r\n    this.state = {\r\n      layer_list: []\r\n    }\r\n    callBuffer = callBuffer.bind(this)\r\n    new_geojsonToParent = new_geojsonToParent.bind(this)\r\n    getLayerList = getLayerList.bind(this)\r\n    find_called_geojson = find_called_geojson.bind(this)\r\n\r\n  }\r\n\r\n  render() {\r\n    return ([\r\n      <div id=\"sidebar_content\">\r\n          <div id=\"sidebar_title_div\">\r\n              <h1 id=\"title\">App name</h1>\r\n          </div>\r\n          <div id=\"tools\">\r\n              <p id=\"subtitle\">Tools</p>\r\n              <ul id=\"tool_layer\">\r\n                  <li className=\"buffer\">\r\n                      Buffer {this.state.buffer_radius}\r\n                  </li>\r\n                  <li hidden className=\"buffer_content\"><Buffer/></li>\r\n                  <li className=\"dissolve\">\r\n                      Dissolve\r\n                  </li>\r\n                  <li hidden className=\"dissolve_content\"><Dissolve/></li>\r\n                  <li className=\"union\">\r\n                      Union\r\n                  </li>\r\n                  <li hidden className=\"union_content\"></li>\r\n                  <li className=\"intersection\">\r\n                      Intersection\r\n                  </li>\r\n                  <li hidden className=\"intersection_content\"></li>\r\n                  <li className=\"diffrence\">\r\n                      Diffrence\r\n                  </li>\r\n                  <li hidden className=\"diffrence_content\"></li>\r\n                  <li className=\"extract\">\r\n                      Extract Feature\r\n                  </li>\r\n                  <li hidden className=\"extract_content\"></li>\r\n              </ul>\r\n          </div>\r\n          <div id='Layers'>\r\n              <Layers/>\r\n          </div>\r\n      </div>\r\n    ])\r\n  }\r\n}\r\n\r\nexport default Sidebar;\r\n","import React, { Component } from 'react';\nimport MainMap from \"./Map/MainMap\"\nimport Sidebar from \"./sidebar/Sidebar\"\nimport \"./App.css\"\n\nclass App extends Component {\n    render() {\n        return ([\n          <div id='page_content'>\n            <MainMap key='mainmap_key'/>\n            <div id='sidebar'>\n              <Sidebar key='sidebar_key'/>\n            </div>\n          </div>\n        ])\n      }\n}\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'leaflet/dist/leaflet.css';\nimport './index.css';\nimport App from './App';\nimport registerServiceWorker from './registerServiceWorker';\nimport $ from \"jquery\";\n\n\nReactDOM.render(<App />, document.getElementById('root'));\nregisterServiceWorker();\n\n\n\n$( '.buffer' ).click(function() {\n    $('.buffer_content').toggle();\n});\n\n$( '.dissolve' ).click(function() {\n    $('.dissolve_content').toggle();\n});\n\n$( '.intersection' ).click(function() {\n   console.log(\"Intersect\")\n});\n"],"sourceRoot":""}